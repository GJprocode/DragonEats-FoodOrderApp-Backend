diff --git a/.env b/.env
deleted file mode 100644
index fc70e5db..00000000
--- a/.env
+++ /dev/null
@@ -1,39 +0,0 @@
-# MongoDB Connection
-MONGODB_CONNECTION_STRING=mongodb+srv://admin:GSGJphcE92nP1v3h@foodapp.h9fxelw.mongodb.net/?retryWrites=true&w=majority&appName=FoodApp
-
-# MongoDB API Keys for Whitelisting, noit in use blocked by MOngoDB email verification
-# Made the IP range wider, so less ferquent whitelisting and manual add CIP in networktab
-MONGODB_PUBLIC_KEY=roaqhomo # Replace with your actual public key
-MONGODB_PRIVATE_KEY=371b52d6-8f8b-4c6a-bc94-5a8275de401f  # Replace with your actual private key
-PROJECT_ID=662215734cede663ddc0febb  # Replace with your MongoDB Project ID
-
-# Auth0 Configuration
-AUTH0_AUDIENCE=foodapp-api
-AUTH0_ISSUER_BASE_URL=https://dev-hpb8w64lqtf3lyv4.us.auth0.com/
-
-# Cloudinary Configuration
-CLOUDINARY_CLOUD_NAME=dzmsuxny5
-CLOUDINARY_API_KEY=773499786479288
-CLOUDINARY_API_SECRET=cTu__2B6sVEUi5RDeNwZJHmdMYQ
-
-# Stripe, local
-FRONTEND_URL=http://localhost:5173
-# in render, in use
-# FRONTEND_URL=https://dragoneats-foodorderapp-frontend.onrender.com
-# Publishable key, not in use
-# STRIPE_API_KEY=pk_test_51Q4dXMA4GsorFKGdUPjvrL6b0y72KvpPMCMjQlNjJozpMG50FMKuU8cA7SRHkv1iETJ5PwbAZEl6uQrJVOnxhawU00tfDfxyp1
-#  Secret key production in render
-STRIPE_API_KEY=sk_test_51Q4dXMA4GsorFKGdtPf9HxiS2s8E8UnbYxXvgx41tPjNRRuV5jHpcFVT2ySjLMj67JrspP9PtlOV6FOArWRKiX7E00jLvp1gYu
-
-
-# In render
-# STRIPE_WEBHOOK_SECRET=whsec_Oh9qILqzzgdKyriVQRLGqAjnS6YTAIAS
-# devlopment
-STRIPE_WEBHOOK_SECRET=whsec_c0fb8043771d775850ed6c280a8bebe74d0d617f598c5ff273f993116680667d
-
-
-# node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
-
-
-SESSION_SECRET=d3daa0a0427fe0be6c80d92142435bea33acc5c7835d41c1126775cb48d1682544e016d1eed53741ed3726c5ee88a3cb729ec36ca327739c79daedc3a50a7077
-
diff --git a/.gitignore b/.gitignore
index 60569e82..0356b00d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,29 @@
 .env
-dist/
+
+# Logs
+logs
+*.log
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+pnpm-debug.log*
+lerna-debug.log*
+
 node_modules/
+dist
+!dist/google0c43e2dd203680d9.html
+dist-ssr
+*.local
+node_modules/
+
+
+# Editor directories and files
+.vscode/*
+!.vscode/extensions.json
+.idea
+.DS_Store
+*.suo
+*.ntvs*
+*.njsproj
+*.sln
+*.sw?
diff --git a/backend_diff.txt b/backend_diff.txt
new file mode 100644
index 00000000..db216999
--- /dev/null
+++ b/backend_diff.txt
@@ -0,0 +1,401 @@
+[1mdiff --git a/src/controllers/MyRestaurantController.ts b/src/controllers/MyRestaurantController.ts[m
+[1mindex d1416979..cce03591 100644[m
+[1m--- a/src/controllers/MyRestaurantController.ts[m
+[1m+++ b/src/controllers/MyRestaurantController.ts[m
+[36m@@ -1,3 +1,5 @@[m
+[32m+[m[32m// backend/src/controllers/MyRestaurantController.ts[m
+[32m+[m
+ import { Request, Response } from "express";[m
+ import Restaurant from "../models/restaurant";[m
+ import mongoose from "mongoose";[m
+[36m@@ -74,8 +76,6 @@[m [mexport const getMyRestaurant = async (req: Request, res: Response) => {[m
+       await restaurant.save();[m
+     }[m
+ [m
+[31m-    // console.log("Raw restaurant from DB:", restaurant);[m
+[31m-[m
+     // Convert the entire restaurant document to a plain object once[m
+     const restaurantObj = restaurant.toObject();[m
+ [m
+[36m@@ -96,7 +96,6 @@[m [mexport const getMyRestaurant = async (req: Request, res: Response) => {[m
+ [m
+     // Convert to pure JSON object[m
+     const finalRestaurant = JSON.parse(JSON.stringify(formattedRestaurant));[m
+[31m-    // console.log("Final pure JSON restaurant sent to frontend:", finalRestaurant);[m
+ [m
+     res.json(finalRestaurant);[m
+   } catch (error) {[m
+[36m@@ -107,21 +106,77 @@[m [mexport const getMyRestaurant = async (req: Request, res: Response) => {[m
+ [m
+ export const createMyRestaurant = async (req: Request, res: Response): Promise<void> => {[m
+   try {[m
+[32m+[m[32m    const existingRestaurant = await Restaurant.findOne({ user: req.userId }).exec();[m
+[32m+[m[32m    if (existingRestaurant) {[m
+[32m+[m[32m      res.status(409).json({ message: "User restaurant already exists" });[m
+[32m+[m[32m      return;[m
+[32m+[m[32m    }[m
+[32m+[m
+[32m+[m[32m    const user = await User.findById(req.userId);[m
+[32m+[m[32m    if (!user) {[m
+[32m+[m[32m      res.status(404).json({ message: "User not found" });[m
+[32m+[m[32m      return;[m
+[32m+[m[32m    }[m
+[32m+[m
+[32m+[m[32m    // Convert wholesale to boolean[m
+[32m+[m[32m    const wholesale = req.body.wholesale === "true";[m
+[32m+[m
+     const restaurant = new Restaurant({[m
+[31m-      ...req.body,[m
+[32m+[m[32m      restaurantName: req.body.restaurantName,[m
+[32m+[m[32m      cellphone: req.body.cellphone,[m
+[32m+[m[32m      branchesInfo: req.body.branchesInfo.map((branch: any) => ({[m
+[32m+[m[32m        cities: branch.cities,[m
+[32m+[m[32m        branchName: branch.branchName,[m
+[32m+[m[32m        latitude: branch.latitude,[m
+[32m+[m[32m        longitude: branch.longitude,[m
+[32m+[m[32m        deliveryPrice: Math.round(branch.deliveryPrice * 100), // Convert to cents[m
+[32m+[m[32m        deliveryTime: branch.deliveryTime,[m
+[32m+[m[32m      })),[m
+[32m+[m[32m      country: req.body.country,[m
+[32m+[m[32m      wholesale: wholesale, // Saved as boolean[m
+[32m+[m[32m      cuisines: req.body.cuisines,[m
+[32m+[m[32m      menuItems: req.body.menuItems.map((item: any) => ({[m
+[32m+[m[32m        name: item.name,[m
+[32m+[m[32m        price: Math.round(item.price * 100), // Convert to cents[m
+[32m+[m[32m        imageUrl: item.imageUrl || "",[m
+[32m+[m[32m      })),[m
+       user: new mongoose.Types.ObjectId(req.userId),[m
+[31m-      email: req.userEmail || "",[m
+[32m+[m[32m      email: user.email || "",[m
+[32m+[m[32m      status: "submitted",[m
+       lastUpdated: new Date(),[m
+     });[m
+ [m
+[32m+[m[32m    const files = req.files as { [fieldname: string]: Express.Multer.File[] } | undefined;[m
+[32m+[m
+[32m+[m[32m    // Handle restaurant image[m
+[32m+[m[32m    if (files?.restaurantImageFile && files.restaurantImageFile.length > 0) {[m
+[32m+[m[32m      const file = files.restaurantImageFile[0];[m
+[32m+[m[32m      const imageUrl = await uploadImage(file);[m
+[32m+[m[32m      restaurant.restaurantImageUrl = imageUrl;[m
+[32m+[m[32m    }[m
+[32m+[m
+[32m+[m[32m    // Handle menu item images[m
+[32m+[m[32m    if (files) {[m
+[32m+[m[32m      for (let i = 0; i < req.body.menuItems.length; i++) {[m
+[32m+[m[32m        const field = `menuItems[${i}].menuItemImageFile`; // Use dot notation[m
+[32m+[m[32m        if (files[field] && files[field].length > 0) {[m
+[32m+[m[32m          const file = files[field][0];[m
+[32m+[m[32m          const imageUrl = await uploadImage(file);[m
+[32m+[m[32m          restaurant.menuItems[i].imageUrl = imageUrl;[m
+[32m+[m[32m        }[m
+[32m+[m[32m      }[m
+[32m+[m[32m    }[m
+[32m+[m
+     await restaurant.save();[m
+ [m
+[32m+[m[32m    // Prepare response[m
+     const restaurantObj = restaurant.toObject();[m
+     const formattedResponse = {[m
+       ...restaurantObj,[m
+       branchesInfo: restaurantObj.branchesInfo.map((branch: any) => ({[m
+         ...branch,[m
+         deliveryPrice: branch.deliveryPrice / 100,[m
+[32m+[m[32m        deliveryTime: branch.deliveryTime,[m
+       })),[m
+       menuItems: restaurantObj.menuItems.map((menuItem: any) => ({[m
+         ...menuItem,[m
+[36m@@ -131,9 +186,14 @@[m [mexport const createMyRestaurant = async (req: Request, res: Response): Promise<v[m
+ [m
+     const finalResponse = JSON.parse(JSON.stringify(formattedResponse));[m
+     res.status(201).json(finalResponse);[m
+[31m-  } catch (error) {[m
+[31m-    console.error("Error creating restaurant:", error);[m
+[31m-    res.status(500).json({ message: "Error creating restaurant" });[m
+[32m+[m[32m  } catch (error: unknown) {[m
+[32m+[m[32m    if (error instanceof Error) {[m
+[32m+[m[32m      console.error("Error creating restaurant:", error.message);[m
+[32m+[m[32m      res.status(500).json({ message: "Error creating restaurant", error: error.message });[m
+[32m+[m[32m    } else {[m
+[32m+[m[32m      console.error("Unexpected error creating restaurant:", error);[m
+[32m+[m[32m      res.status(500).json({ message: "Unexpected error creating restaurant" });[m
+[32m+[m[32m    }[m
+   }[m
+ };[m
+ [m
+[36m@@ -145,36 +205,80 @@[m [mexport const updateMyRestaurant = async (req: Request, res: Response) => {[m
+       return res.status(404).json({ message: "Restaurant not found" });[m
+     }[m
+ [m
+[32m+[m[32m    // Convert wholesale to boolean if provided[m
+[32m+[m[32m    if (req.body.wholesale !== undefined) {[m
+[32m+[m[32m      restaurant.wholesale = req.body.wholesale === "true";[m
+[32m+[m[32m    }[m
+[32m+[m
+[32m+[m[32m    // Update basic fields[m
+     restaurant.restaurantName = req.body.restaurantName || restaurant.restaurantName;[m
+[32m+[m[32m    restaurant.cellphone = req.body.cellphone || restaurant.cellphone;[m
+     restaurant.country = req.body.country || restaurant.country;[m
+     restaurant.cuisines = Array.isArray(req.body.cuisines) ? req.body.cuisines : restaurant.cuisines;[m
+[31m-    restaurant.wholesale = typeof req.body.wholesale === "boolean" ? req.body.wholesale : restaurant.wholesale;[m
+[31m-    restaurant.cellphone = req.body.cellphone || restaurant.cellphone;[m
+ [m
+[32m+[m[32m    // Update branchesInfo[m
+     if (Array.isArray(req.body.branchesInfo)) {[m
+       restaurant.branchesInfo = req.body.branchesInfo.map((branch: any, index: number) => ({[m
+         _id: branch._id || (restaurant.branchesInfo[index]?._id || new mongoose.Types.ObjectId()),[m
+         cities: branch.cities || restaurant.branchesInfo[index]?.cities || "Default City",[m
+[31m-        branchName: branch.branchName || restaurant.branchesInfo[index]?.branchName || `Branch ${index + 1}`,[m
+[31m-        latitude: typeof branch.latitude === "number" ? branch.latitude : (restaurant.branchesInfo[index]?.latitude || 0),[m
+[31m-        longitude: typeof branch.longitude === "number" ? branch.longitude : (restaurant.branchesInfo[index]?.longitude || 0),[m
+[31m-        deliveryPrice: branch.deliveryPrice != null ? Math.round(branch.deliveryPrice * 100) : (restaurant.branchesInfo[index]?.deliveryPrice || 0),[m
+[31m-        deliveryTime: branch.deliveryTime != null ? branch.deliveryTime : (restaurant.branchesInfo[index]?.deliveryTime || 0),[m
+[32m+[m[32m        branchName:[m
+[32m+[m[32m          branch.branchName || restaurant.branchesInfo[index]?.branchName || `Branch ${index + 1}`,[m
+[32m+[m[32m        latitude:[m
+[32m+[m[32m          typeof branch.latitude === "number"[m
+[32m+[m[32m            ? branch.latitude[m
+[32m+[m[32m            : restaurant.branchesInfo[index]?.latitude || 0,[m
+[32m+[m[32m        longitude:[m
+[32m+[m[32m          typeof branch.longitude === "number"[m
+[32m+[m[32m            ? branch.longitude[m
+[32m+[m[32m            : restaurant.branchesInfo[index]?.longitude || 0,[m
+[32m+[m[32m        deliveryPrice:[m
+[32m+[m[32m          branch.deliveryPrice != null[m
+[32m+[m[32m            ? Math.round(branch.deliveryPrice * 100)[m
+[32m+[m[32m            : restaurant.branchesInfo[index]?.deliveryPrice || 0,[m
+[32m+[m[32m        deliveryTime:[m
+[32m+[m[32m          branch.deliveryTime != null ? branch.deliveryTime : restaurant.branchesInfo[index]?.deliveryTime || 0,[m
+       }));[m
+     }[m
+ [m
+[32m+[m[32m    // Update menuItems[m
+     if (Array.isArray(req.body.menuItems)) {[m
+[31m-      restaurant.menuItems = req.body.menuItems.map((menuItem: any, i: number) => ({[m
+[31m-        _id: menuItem._id || (restaurant.menuItems[i]?._id || new mongoose.Types.ObjectId()),[m
+[31m-        name: menuItem.name || restaurant.menuItems[i]?.name || "Unnamed Item",[m
+[31m-        price: menuItem.price != null ? Math.round(menuItem.price * 100) : (restaurant.menuItems[i]?.price || 0),[m
+[31m-        imageUrl: menuItem.imageUrl || restaurant.menuItems[i]?.imageUrl || "/path/to/placeholder-image.jpg",[m
+[32m+[m[32m      restaurant.menuItems = req.body.menuItems.map((menuItem: any, index: number) => ({[m
+[32m+[m[32m        _id: menuItem._id || (restaurant.menuItems[index]?._id || new mongoose.Types.ObjectId()),[m
+[32m+[m[32m        name: menuItem.name || restaurant.menuItems[index]?.name || "Unnamed Item",[m
+[32m+[m[32m        price:[m
+[32m+[m[32m          menuItem.price != null ? Math.round(menuItem.price * 100) : restaurant.menuItems[index]?.price || 0,[m
+[32m+[m[32m        imageUrl:[m
+[32m+[m[32m          menuItem.imageUrl ||[m
+[32m+[m[32m          restaurant.menuItems[index]?.imageUrl ||[m
+[32m+[m[32m          "/path/to/placeholder-image.jpg",[m
+       }));[m
+     }[m
+ [m
+[32m+[m[32m    const files = req.files as { [fieldname: string]: Express.Multer.File[] } | undefined;[m
+[32m+[m
+[32m+[m[32m    // Handle restaurant image update[m
+[32m+[m[32m    if (files?.restaurantImageFile && files.restaurantImageFile.length > 0) {[m
+[32m+[m[32m      const file = files.restaurantImageFile[0];[m
+[32m+[m[32m      const imageUrl = await uploadImage(file);[m
+[32m+[m[32m      restaurant.restaurantImageUrl = imageUrl;[m
+[32m+[m[32m    }[m
+[32m+[m
+[32m+[m[32m    // Handle menu item images update[m
+[32m+[m[32m    if (files) {[m
+[32m+[m[32m      for (let i = 0; i < req.body.menuItems.length; i++) {[m
+[32m+[m[32m        const field = `menuItems[${i}].menuItemImageFile`; // Use dot notation[m
+[32m+[m[32m        if (files[field] && files[field].length > 0) {[m
+[32m+[m[32m          const file = files[field][0];[m
+[32m+[m[32m          const imageUrl = await uploadImage(file);[m
+[32m+[m[32m          restaurant.menuItems[i].imageUrl = imageUrl;[m
+[32m+[m[32m        }[m
+[32m+[m[32m      }[m
+[32m+[m[32m    }[m
+[32m+[m
+     restaurant.lastUpdated = new Date();[m
+     await restaurant.save();[m
+ [m
+[32m+[m[32m    // Prepare response[m
+     const restaurantObj = restaurant.toObject();[m
+     const formattedResponse = {[m
+       ...restaurantObj,[m
+[36m@@ -190,15 +294,19 @@[m [mexport const updateMyRestaurant = async (req: Request, res: Response) => {[m
+ [m
+     const finalResponse = JSON.parse(JSON.stringify(formattedResponse));[m
+     res.status(200).json(finalResponse);[m
+[31m-  } catch (error) {[m
+[31m-    console.error("Error updating restaurant:", error);[m
+[31m-    res.status(500).json({ message: "Error updating restaurant" });[m
+[32m+[m[32m  } catch (error: unknown) {[m
+[32m+[m[32m    if (error instanceof Error) {[m
+[32m+[m[32m      console.error("Error updating restaurant:", error.message);[m
+[32m+[m[32m      res.status(500).json({ message: "Error updating restaurant", error: error.message });[m
+[32m+[m[32m    } else {[m
+[32m+[m[32m      console.error("Unexpected error updating restaurant:", error);[m
+[32m+[m[32m      res.status(500).json({ message: "Unexpected error updating restaurant" });[m
+[32m+[m[32m    }[m
+   }[m
+ };[m
+ [m
+[32m+[m[32m// Additional Controller Functions (unchanged)[m
+ [m
+[31m-[m
+[31m-// The other controller functions remain unchanged, but we won't omit them here:[m
+ export const updateRestaurantStatus = async (req: Request, res: Response): Promise<void> => {[m
+   try {[m
+     const restaurantId = req.params.id;[m
+[36m@@ -228,7 +336,7 @@[m [mexport const updateRestaurantStatus = async (req: Request, res: Response): Promi[m
+   }[m
+ };[m
+ [m
+[31m-const getMyRestaurantOrders = async (req: Request, res: Response) => {[m
+[32m+[m[32mexport const getMyRestaurantOrders = async (req: Request, res: Response) => {[m
+   try {[m
+     const { status, date } = req.query;[m
+     const restaurant = await Restaurant.findOne({ user: req.userId });[m
+[36m@@ -324,10 +432,11 @@[m [mexport const updateRestaurantOrderStatus = async (req: Request, res: Response) =[m
+ };[m
+ [m
+ export default {[m
+[31m-  updateRestaurantOrderStatus,[m
+[31m-  getMyRestaurantOrders,[m
+[32m+[m[32m  getAllRestaurants,[m
+   getMyRestaurant,[m
+   createMyRestaurant,[m
+   updateMyRestaurant,[m
+[31m-  uploadImage,[m
+[32m+[m[32m  updateRestaurantStatus,[m
+[32m+[m[32m  getMyRestaurantOrders,[m
+[32m+[m[32m  updateRestaurantOrderStatus,[m
+ };[m
+[1mdiff --git a/src/models/restaurant.ts b/src/models/restaurant.ts[m
+[1mindex 43caaab9..80ddc51b 100644[m
+[1m--- a/src/models/restaurant.ts[m
+[1m+++ b/src/models/restaurant.ts[m
+[36m@@ -1,6 +1,8 @@[m
+[31m-import mongoose, { Schema, Document, Types } from "mongoose";[m
+[32m+[m[32m// backend/src/models/restaurant.ts[m
+ [m
+[32m+[m[32m// backend/src/models/restaurant.ts[m
+ [m
+[32m+[m[32mimport mongoose, { Schema, Document, Types } from "mongoose";[m
+ [m
+ // Define the MenuItem schema and type[m
+ const menuItemSchema = new Schema({[m
+[36m@@ -33,7 +35,7 @@[m [mconst branchInfoSchema = new Schema({[m
+   latitude: { type: Number, required: true },[m
+   longitude: { type: Number, required: true },[m
+   deliveryPrice: { type: Number, default: 0 }, // in cents[m
+[31m-  deliveryTime: { type: Number, default: 0 },  // in minutes or days, depending on business type[m
+[32m+[m[32m  deliveryTime: { type: Number, default: 0 }, // in minutes or days, depending on business type[m
+ });[m
+ [m
+ export type BranchInfoType = {[m
+[36m@@ -43,7 +45,7 @@[m [mexport type BranchInfoType = {[m
+   latitude: number;[m
+   longitude: number;[m
+   deliveryPrice: number; // in cents[m
+[31m-  deliveryTime: number;  // in minutes or days[m
+[32m+[m[32m  deliveryTime: number; // in minutes or days[m
+ };[m
+ [m
+ // Define the Restaurant interface[m
+[36m@@ -66,7 +68,7 @@[m [minterface IRestaurant extends Document {[m
+ }[m
+ [m
+ // Define the Restaurant schema[m
+[31m-const RestaurantSchema = new Schema({[m
+[32m+[m[32mconst RestaurantSchema: Schema = new Schema({[m
+   restaurantName: { type: String, required: true },[m
+   branchesInfo: [branchInfoSchema],[m
+   country: { type: String, required: true },[m
+[1mdiff --git a/src/routes/MyRestaurantRoute.ts b/src/routes/MyRestaurantRoute.ts[m
+[1mindex 30779e9b..6fd83c7a 100644[m
+[1m--- a/src/routes/MyRestaurantRoute.ts[m
+[1m+++ b/src/routes/MyRestaurantRoute.ts[m
+[36m@@ -1,11 +1,20 @@[m
+ //  C:\Users\gertf\Desktop\FoodApp\backend\src\routes\MyRestaurantRoute.ts[m
+ [m
+[32m+[m[32m// backend/src/routes/MyRestaurantRoute.ts[m
+[32m+[m
+[32m+[m[32m// backend/src/routes/MyRestaurantRoute.ts[m
+[32m+[m
+ import express from "express";[m
+ import multer from "multer";[m
+[31m-import { getMyRestaurant, createMyRestaurant, updateMyRestaurant } from "../controllers/MyRestaurantController";[m
+[32m+[m[32mimport {[m
+[32m+[m[32m  getMyRestaurant,[m
+[32m+[m[32m  createMyRestaurant,[m
+[32m+[m[32m  updateMyRestaurant,[m
+[32m+[m[32m  updateRestaurantOrderStatus,[m
+[32m+[m[32m  getMyRestaurantOrders,[m
+[32m+[m[32m} from "../controllers/MyRestaurantController";[m
+ import { jwtCheck, jwtParse } from "../middleware/auth";[m
+ import { validateMyRestaurantRequest } from "../middleware/validation";[m
+[31m-import  MyRestaurantController from "../controllers/MyRestaurantController";[m
+ [m
+ const router = express.Router();[m
+ [m
+[36m@@ -17,37 +26,20 @@[m [mconst upload = multer({[m
+   },[m
+ });[m
+ [m
+[31m-router.get([m
+[31m-  "/order",[m
+[31m-  jwtCheck,[m
+[31m-  jwtParse,[m
+[31m-  MyRestaurantController.getMyRestaurantOrders[m
+[31m-);[m
+[31m-[m
+[31m-router.patch([m
+[31m-  "/order/:orderId/status",[m
+[31m-  jwtCheck,[m
+[31m-  jwtParse,[m
+[31m-  MyRestaurantController.updateRestaurantOrderStatus[m
+[31m-);[m
+[31m-[m
+[31m-[m
+[31m-[m
+[32m+[m[32m// Define menuItemsFields with the correct field names using dot notation[m
+ const menuItemsFields = Array.from({ length: 40 }, (_, i) => ({[m
+[31m-  name: `menuItems[${i}].menuItemImageFile`,[m
+[32m+[m[32m  name: `menuItems[${i}].menuItemImageFile`, // Matches frontend with dot notation[m
+   maxCount: 1,[m
+ }));[m
+ [m
+[32m+[m[32m// Define the fields Multer should handle[m
+ const restaurantUpload = upload.fields([[m
+[31m-  { name: "restaurantImageFile", maxCount: 1 },[m
+[32m+[m[32m  { name: "restaurantImageFile", maxCount: 1 }, // Matches frontend[m
+   ...menuItemsFields,[m
+ ]);[m
+ [m
+[31m-// GET restaurant for logged-in user actually no validation needed but works with jwt & parse, [m
+[31m-router.get("/",[m
+[31m-   jwtCheck,[m
+[31m-    jwtParse,[m
+[31m-    getMyRestaurant);[m
+[32m+[m[32m// GET restaurant for logged-in user[m
+[32m+[m[32mrouter.get("/", jwtCheck, jwtParse, getMyRestaurant);[m
+ [m
+ // POST (create) a new restaurant[m
+ router.post([m
+[36m@@ -69,5 +61,20 @@[m [mrouter.put([m
+   updateMyRestaurant[m
+ );[m
+ [m
+[31m-export default router;[m
+[32m+[m[32m// PATCH (update order status)[m
+[32m+[m[32mrouter.patch([m
+[32m+[m[32m  "/order/:id/status",[m
+[32m+[m[32m  jwtCheck,[m
+[32m+[m[32m  jwtParse,[m
+[32m+[m[32m  updateRestaurantOrderStatus[m
+[32m+[m[32m);[m
+ [m
+[32m+[m[32m// GET (fetch orders)[m
+[32m+[m[32mrouter.get([m
+[32m+[m[32m  "/order",[m
+[32m+[m[32m  jwtCheck,[m
+[32m+[m[32m  jwtParse,[m
+[32m+[m[32m  getMyRestaurantOrders[m
+[32m+[m[32m);[m
+[32m+[m
+[32m+[m[32mexport default router;[m
diff --git a/package-lock.json b/package-lock.json
index ee435271..51ca31d4 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -12,16 +12,15 @@
         "@azure/cognitiveservices-contentmoderator": "^5.0.1",
         "@azure/ms-rest-js": "^2.7.0",
         "@google-cloud/vision": "^4.3.2",
-        "@types/multer": "^1.4.11",
         "@types/react-router-dom": "^5.3.3",
         "axios": "^1.7.7",
         "bad-words": "^4.0.0",
         "body-parser": "^1.20.3",
         "clamav.js": "^0.12.0",
-        "cloudinary": "^2.2.0",
+        "cloudinary": "^2.5.1",
         "concurrently": "^9.0.1",
         "cors": "^2.8.5",
-        "dotenv": "^16.4.5",
+        "dotenv": "^16.4.7",
         "express": "^4.19.2",
         "express-oauth2-jwt-bearer": "^1.6.0",
         "express-session": "^1.17.0",
@@ -35,7 +34,7 @@
         "multer": "^1.4.5-lts.1",
         "semver": "^7.6.0",
         "shadcn-ui": "^0.2.3",
-        "stripe": "^17.0.0",
+        "stripe": "^17.4.0",
         "uuid": "^10.0.0"
       },
       "devDependencies": {
@@ -48,9 +47,11 @@
         "@types/express-session": "^1.17.0",
         "@types/file-type": "^10.9.1",
         "@types/js-cookie": "^3.0.6",
-        "@types/jsonwebtoken": "^9.0.6",
+        "@types/jsonwebtoken": "^9.0.7",
         "@types/mongoose": "^5.11.97",
-        "@types/node": "^20.16.1",
+        "@types/multer": "^1.4.12",
+        "@types/node": "^20.17.9",
+        "@types/stripe": "^8.0.417",
         "babel-plugin-transform-remove-console": "^6.9.4",
         "eslint-config-prettier": "^9.1.0",
         "install": "^0.13.0",
@@ -2439,6 +2440,7 @@
       "version": "1.19.5",
       "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.5.tgz",
       "integrity": "sha512-fB3Zu92ucau0iQ0JMCFQE7b/dv8Ot07NI3KaZIkIUNXq82k4eBAqUaneXfleGY9JWskeS9y+u0nXMyspcuQrCg==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@types/connect": "*",
@@ -2455,6 +2457,7 @@
       "version": "3.4.38",
       "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
       "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@types/node": "*"
@@ -2482,6 +2485,7 @@
       "version": "4.17.21",
       "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.21.tgz",
       "integrity": "sha512-ejlPM315qwLpaQlQDTjPdsUFSc6ZsP4AN6AlWnogPjQ7CVi7PYF3YVz+CY3jE2pwYf7E/7HlDAN0rV2GxTG0HQ==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@types/body-parser": "*",
@@ -2494,6 +2498,7 @@
       "version": "4.19.6",
       "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.19.6.tgz",
       "integrity": "sha512-N4LZ2xG7DatVqhCZzOGb1Yi5lMbXSZcmdLDe9EzSndPV2HpWYWzRbaerl2n27irrm94EPpprqa8KpskPT085+A==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@types/node": "*",
@@ -2534,6 +2539,7 @@
       "version": "2.0.4",
       "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.4.tgz",
       "integrity": "sha512-D0CFMMtydbJAegzOyHjtiKPLlvnm3iTZyZRSZoLq2mRhDdmLfIWOCYPfQJ4cu2erKghU++QvjcUjp/5h7hESpA==",
+      "dev": true,
       "license": "MIT"
     },
     "node_modules/@types/js-cookie": {
@@ -2571,6 +2577,7 @@
       "version": "1.3.5",
       "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.5.tgz",
       "integrity": "sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==",
+      "dev": true,
       "license": "MIT"
     },
     "node_modules/@types/mongoose": {
@@ -2588,6 +2595,7 @@
       "version": "1.4.12",
       "resolved": "https://registry.npmjs.org/@types/multer/-/multer-1.4.12.tgz",
       "integrity": "sha512-pQ2hoqvXiJt2FP9WQVLPRO+AmiIm/ZYkavPlIQnx282u4ZrVdztx0pkh3jjpQt0Kz+YI0YhSG264y08UJKoUQg==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@types/express": "*"
@@ -2612,12 +2620,14 @@
       "version": "6.9.17",
       "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.17.tgz",
       "integrity": "sha512-rX4/bPcfmvxHDv0XjfJELTTr+iB+tn032nPILqHm5wbthUUUuVtNGGqzhya9XUxjTP8Fpr0qYgSZZKxGY++svQ==",
+      "dev": true,
       "license": "MIT"
     },
     "node_modules/@types/range-parser": {
       "version": "1.2.7",
       "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.7.tgz",
       "integrity": "sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==",
+      "dev": true,
       "license": "MIT"
     },
     "node_modules/@types/react": {
@@ -2667,6 +2677,7 @@
       "version": "0.17.4",
       "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.4.tgz",
       "integrity": "sha512-x2EM6TJOybec7c52BX0ZspPodMsQUd5L6PRwOunVyVUhXiBSKf3AezDL8Dgvgt5o0UfKNfuA0eMLr2wLT4AiBA==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@types/mime": "^1",
@@ -2677,6 +2688,7 @@
       "version": "1.15.7",
       "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.7.tgz",
       "integrity": "sha512-W8Ym+h8nhuRwaKPaDw34QUkwsGi6Rc4yYqvKFo5rm2FUEhCFbzVWrxXUxuKK8TASjWsysJY0nsmNCGhCOIsrOw==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@types/http-errors": "*",
@@ -2684,6 +2696,17 @@
         "@types/send": "*"
       }
     },
+    "node_modules/@types/stripe": {
+      "version": "8.0.417",
+      "resolved": "https://registry.npmjs.org/@types/stripe/-/stripe-8.0.417.tgz",
+      "integrity": "sha512-PTuqskh9YKNENnOHGVJBm4sM0zE8B1jZw1JIskuGAPkMB+OH236QeN8scclhYGPA4nG6zTtPXgwpXdp+HPDTVw==",
+      "deprecated": "This is a stub types definition. stripe provides its own type definitions, so you do not need this installed.",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "stripe": "*"
+      }
+    },
     "node_modules/@types/tough-cookie": {
       "version": "4.0.5",
       "resolved": "https://registry.npmjs.org/@types/tough-cookie/-/tough-cookie-4.0.5.tgz",
@@ -3735,9 +3758,9 @@
       }
     },
     "node_modules/dotenv": {
-      "version": "16.4.6",
-      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.6.tgz",
-      "integrity": "sha512-JhcR/+KIjkkjiU8yEpaB/USlzVi3i5whwOjpIRNGi9svKEXZSe+Qp6IWAjFjv+2GViAoDRCUv/QLNziQxsLqDg==",
+      "version": "16.4.7",
+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.7.tgz",
+      "integrity": "sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ==",
       "license": "BSD-2-Clause",
       "engines": {
         "node": ">=12"
@@ -4117,9 +4140,9 @@
       }
     },
     "node_modules/express": {
-      "version": "4.21.1",
-      "resolved": "https://registry.npmjs.org/express/-/express-4.21.1.tgz",
-      "integrity": "sha512-YSFlK1Ee0/GC8QaO91tHcDxJiE/X4FbpAyQWkxAvG6AXCuR65YzK8ua6D9hvi/TzUfZMpc+BwuM1IPw8fmQBiQ==",
+      "version": "4.21.2",
+      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
+      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
       "license": "MIT",
       "dependencies": {
         "accepts": "~1.3.8",
@@ -4141,7 +4164,7 @@
         "methods": "~1.1.2",
         "on-finished": "2.4.1",
         "parseurl": "~1.3.3",
-        "path-to-regexp": "0.1.10",
+        "path-to-regexp": "0.1.12",
         "proxy-addr": "~2.0.7",
         "qs": "6.13.0",
         "range-parser": "~1.2.1",
@@ -4156,6 +4179,10 @@
       },
       "engines": {
         "node": ">= 0.10.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/express"
       }
     },
     "node_modules/express-oauth2-jwt-bearer": {
@@ -9283,9 +9310,9 @@
       "license": "MIT"
     },
     "node_modules/path-to-regexp": {
-      "version": "0.1.10",
-      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.10.tgz",
-      "integrity": "sha512-7lf7qcQidTku0Gu3YDPc8DJ1q7OOucfa/BSsIwjuh56VU7katFvuM8hULfkwB3Fns/rsVF7PwPKVw1sl5KQS9w==",
+      "version": "0.1.12",
+      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
+      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
       "license": "MIT"
     },
     "node_modules/path-type": {
diff --git a/package.json b/package.json
index b35ff6fa..08531307 100644
--- a/package.json
+++ b/package.json
@@ -22,16 +22,15 @@
     "@azure/cognitiveservices-contentmoderator": "^5.0.1",
     "@azure/ms-rest-js": "^2.7.0",
     "@google-cloud/vision": "^4.3.2",
-    "@types/multer": "^1.4.11",
     "@types/react-router-dom": "^5.3.3",
     "axios": "^1.7.7",
     "bad-words": "^4.0.0",
     "body-parser": "^1.20.3",
     "clamav.js": "^0.12.0",
-    "cloudinary": "^2.2.0",
+    "cloudinary": "^2.5.1",
     "concurrently": "^9.0.1",
     "cors": "^2.8.5",
-    "dotenv": "^16.4.5",
+    "dotenv": "^16.4.7",
     "express": "^4.19.2",
     "express-oauth2-jwt-bearer": "^1.6.0",
     "express-session": "^1.17.0",
@@ -45,7 +44,7 @@
     "multer": "^1.4.5-lts.1",
     "semver": "^7.6.0",
     "shadcn-ui": "^0.2.3",
-    "stripe": "^17.0.0",
+    "stripe": "^17.4.0",
     "uuid": "^10.0.0"
   },
   "devDependencies": {
@@ -58,9 +57,11 @@
     "@types/express-session": "^1.17.0",
     "@types/file-type": "^10.9.1",
     "@types/js-cookie": "^3.0.6",
-    "@types/jsonwebtoken": "^9.0.6",
+    "@types/jsonwebtoken": "^9.0.7",
     "@types/mongoose": "^5.11.97",
-    "@types/node": "^20.16.1",
+    "@types/multer": "^1.4.12",
+    "@types/node": "^20.17.9",
+    "@types/stripe": "^8.0.417",
     "babel-plugin-transform-remove-console": "^6.9.4",
     "eslint-config-prettier": "^9.1.0",
     "install": "^0.13.0",
diff --git a/src/controllers/MyRestaurantController.ts b/src/controllers/MyRestaurantController.ts
index d1416979..cce03591 100644
--- a/src/controllers/MyRestaurantController.ts
+++ b/src/controllers/MyRestaurantController.ts
@@ -1,3 +1,5 @@
+// backend/src/controllers/MyRestaurantController.ts
+
 import { Request, Response } from "express";
 import Restaurant from "../models/restaurant";
 import mongoose from "mongoose";
@@ -74,8 +76,6 @@ export const getMyRestaurant = async (req: Request, res: Response) => {
       await restaurant.save();
     }
 
-    // console.log("Raw restaurant from DB:", restaurant);
-
     // Convert the entire restaurant document to a plain object once
     const restaurantObj = restaurant.toObject();
 
@@ -96,7 +96,6 @@ export const getMyRestaurant = async (req: Request, res: Response) => {
 
     // Convert to pure JSON object
     const finalRestaurant = JSON.parse(JSON.stringify(formattedRestaurant));
-    // console.log("Final pure JSON restaurant sent to frontend:", finalRestaurant);
 
     res.json(finalRestaurant);
   } catch (error) {
@@ -107,21 +106,77 @@ export const getMyRestaurant = async (req: Request, res: Response) => {
 
 export const createMyRestaurant = async (req: Request, res: Response): Promise<void> => {
   try {
+    const existingRestaurant = await Restaurant.findOne({ user: req.userId }).exec();
+    if (existingRestaurant) {
+      res.status(409).json({ message: "User restaurant already exists" });
+      return;
+    }
+
+    const user = await User.findById(req.userId);
+    if (!user) {
+      res.status(404).json({ message: "User not found" });
+      return;
+    }
+
+    // Convert wholesale to boolean
+    const wholesale = req.body.wholesale === "true";
+
     const restaurant = new Restaurant({
-      ...req.body,
+      restaurantName: req.body.restaurantName,
+      cellphone: req.body.cellphone,
+      branchesInfo: req.body.branchesInfo.map((branch: any) => ({
+        cities: branch.cities,
+        branchName: branch.branchName,
+        latitude: branch.latitude,
+        longitude: branch.longitude,
+        deliveryPrice: Math.round(branch.deliveryPrice * 100), // Convert to cents
+        deliveryTime: branch.deliveryTime,
+      })),
+      country: req.body.country,
+      wholesale: wholesale, // Saved as boolean
+      cuisines: req.body.cuisines,
+      menuItems: req.body.menuItems.map((item: any) => ({
+        name: item.name,
+        price: Math.round(item.price * 100), // Convert to cents
+        imageUrl: item.imageUrl || "",
+      })),
       user: new mongoose.Types.ObjectId(req.userId),
-      email: req.userEmail || "",
+      email: user.email || "",
+      status: "submitted",
       lastUpdated: new Date(),
     });
 
+    const files = req.files as { [fieldname: string]: Express.Multer.File[] } | undefined;
+
+    // Handle restaurant image
+    if (files?.restaurantImageFile && files.restaurantImageFile.length > 0) {
+      const file = files.restaurantImageFile[0];
+      const imageUrl = await uploadImage(file);
+      restaurant.restaurantImageUrl = imageUrl;
+    }
+
+    // Handle menu item images
+    if (files) {
+      for (let i = 0; i < req.body.menuItems.length; i++) {
+        const field = `menuItems[${i}].menuItemImageFile`; // Use dot notation
+        if (files[field] && files[field].length > 0) {
+          const file = files[field][0];
+          const imageUrl = await uploadImage(file);
+          restaurant.menuItems[i].imageUrl = imageUrl;
+        }
+      }
+    }
+
     await restaurant.save();
 
+    // Prepare response
     const restaurantObj = restaurant.toObject();
     const formattedResponse = {
       ...restaurantObj,
       branchesInfo: restaurantObj.branchesInfo.map((branch: any) => ({
         ...branch,
         deliveryPrice: branch.deliveryPrice / 100,
+        deliveryTime: branch.deliveryTime,
       })),
       menuItems: restaurantObj.menuItems.map((menuItem: any) => ({
         ...menuItem,
@@ -131,9 +186,14 @@ export const createMyRestaurant = async (req: Request, res: Response): Promise<v
 
     const finalResponse = JSON.parse(JSON.stringify(formattedResponse));
     res.status(201).json(finalResponse);
-  } catch (error) {
-    console.error("Error creating restaurant:", error);
-    res.status(500).json({ message: "Error creating restaurant" });
+  } catch (error: unknown) {
+    if (error instanceof Error) {
+      console.error("Error creating restaurant:", error.message);
+      res.status(500).json({ message: "Error creating restaurant", error: error.message });
+    } else {
+      console.error("Unexpected error creating restaurant:", error);
+      res.status(500).json({ message: "Unexpected error creating restaurant" });
+    }
   }
 };
 
@@ -145,36 +205,80 @@ export const updateMyRestaurant = async (req: Request, res: Response) => {
       return res.status(404).json({ message: "Restaurant not found" });
     }
 
+    // Convert wholesale to boolean if provided
+    if (req.body.wholesale !== undefined) {
+      restaurant.wholesale = req.body.wholesale === "true";
+    }
+
+    // Update basic fields
     restaurant.restaurantName = req.body.restaurantName || restaurant.restaurantName;
+    restaurant.cellphone = req.body.cellphone || restaurant.cellphone;
     restaurant.country = req.body.country || restaurant.country;
     restaurant.cuisines = Array.isArray(req.body.cuisines) ? req.body.cuisines : restaurant.cuisines;
-    restaurant.wholesale = typeof req.body.wholesale === "boolean" ? req.body.wholesale : restaurant.wholesale;
-    restaurant.cellphone = req.body.cellphone || restaurant.cellphone;
 
+    // Update branchesInfo
     if (Array.isArray(req.body.branchesInfo)) {
       restaurant.branchesInfo = req.body.branchesInfo.map((branch: any, index: number) => ({
         _id: branch._id || (restaurant.branchesInfo[index]?._id || new mongoose.Types.ObjectId()),
         cities: branch.cities || restaurant.branchesInfo[index]?.cities || "Default City",
-        branchName: branch.branchName || restaurant.branchesInfo[index]?.branchName || `Branch ${index + 1}`,
-        latitude: typeof branch.latitude === "number" ? branch.latitude : (restaurant.branchesInfo[index]?.latitude || 0),
-        longitude: typeof branch.longitude === "number" ? branch.longitude : (restaurant.branchesInfo[index]?.longitude || 0),
-        deliveryPrice: branch.deliveryPrice != null ? Math.round(branch.deliveryPrice * 100) : (restaurant.branchesInfo[index]?.deliveryPrice || 0),
-        deliveryTime: branch.deliveryTime != null ? branch.deliveryTime : (restaurant.branchesInfo[index]?.deliveryTime || 0),
+        branchName:
+          branch.branchName || restaurant.branchesInfo[index]?.branchName || `Branch ${index + 1}`,
+        latitude:
+          typeof branch.latitude === "number"
+            ? branch.latitude
+            : restaurant.branchesInfo[index]?.latitude || 0,
+        longitude:
+          typeof branch.longitude === "number"
+            ? branch.longitude
+            : restaurant.branchesInfo[index]?.longitude || 0,
+        deliveryPrice:
+          branch.deliveryPrice != null
+            ? Math.round(branch.deliveryPrice * 100)
+            : restaurant.branchesInfo[index]?.deliveryPrice || 0,
+        deliveryTime:
+          branch.deliveryTime != null ? branch.deliveryTime : restaurant.branchesInfo[index]?.deliveryTime || 0,
       }));
     }
 
+    // Update menuItems
     if (Array.isArray(req.body.menuItems)) {
-      restaurant.menuItems = req.body.menuItems.map((menuItem: any, i: number) => ({
-        _id: menuItem._id || (restaurant.menuItems[i]?._id || new mongoose.Types.ObjectId()),
-        name: menuItem.name || restaurant.menuItems[i]?.name || "Unnamed Item",
-        price: menuItem.price != null ? Math.round(menuItem.price * 100) : (restaurant.menuItems[i]?.price || 0),
-        imageUrl: menuItem.imageUrl || restaurant.menuItems[i]?.imageUrl || "/path/to/placeholder-image.jpg",
+      restaurant.menuItems = req.body.menuItems.map((menuItem: any, index: number) => ({
+        _id: menuItem._id || (restaurant.menuItems[index]?._id || new mongoose.Types.ObjectId()),
+        name: menuItem.name || restaurant.menuItems[index]?.name || "Unnamed Item",
+        price:
+          menuItem.price != null ? Math.round(menuItem.price * 100) : restaurant.menuItems[index]?.price || 0,
+        imageUrl:
+          menuItem.imageUrl ||
+          restaurant.menuItems[index]?.imageUrl ||
+          "/path/to/placeholder-image.jpg",
       }));
     }
 
+    const files = req.files as { [fieldname: string]: Express.Multer.File[] } | undefined;
+
+    // Handle restaurant image update
+    if (files?.restaurantImageFile && files.restaurantImageFile.length > 0) {
+      const file = files.restaurantImageFile[0];
+      const imageUrl = await uploadImage(file);
+      restaurant.restaurantImageUrl = imageUrl;
+    }
+
+    // Handle menu item images update
+    if (files) {
+      for (let i = 0; i < req.body.menuItems.length; i++) {
+        const field = `menuItems[${i}].menuItemImageFile`; // Use dot notation
+        if (files[field] && files[field].length > 0) {
+          const file = files[field][0];
+          const imageUrl = await uploadImage(file);
+          restaurant.menuItems[i].imageUrl = imageUrl;
+        }
+      }
+    }
+
     restaurant.lastUpdated = new Date();
     await restaurant.save();
 
+    // Prepare response
     const restaurantObj = restaurant.toObject();
     const formattedResponse = {
       ...restaurantObj,
@@ -190,15 +294,19 @@ export const updateMyRestaurant = async (req: Request, res: Response) => {
 
     const finalResponse = JSON.parse(JSON.stringify(formattedResponse));
     res.status(200).json(finalResponse);
-  } catch (error) {
-    console.error("Error updating restaurant:", error);
-    res.status(500).json({ message: "Error updating restaurant" });
+  } catch (error: unknown) {
+    if (error instanceof Error) {
+      console.error("Error updating restaurant:", error.message);
+      res.status(500).json({ message: "Error updating restaurant", error: error.message });
+    } else {
+      console.error("Unexpected error updating restaurant:", error);
+      res.status(500).json({ message: "Unexpected error updating restaurant" });
+    }
   }
 };
 
+// Additional Controller Functions (unchanged)
 
-
-// The other controller functions remain unchanged, but we won't omit them here:
 export const updateRestaurantStatus = async (req: Request, res: Response): Promise<void> => {
   try {
     const restaurantId = req.params.id;
@@ -228,7 +336,7 @@ export const updateRestaurantStatus = async (req: Request, res: Response): Promi
   }
 };
 
-const getMyRestaurantOrders = async (req: Request, res: Response) => {
+export const getMyRestaurantOrders = async (req: Request, res: Response) => {
   try {
     const { status, date } = req.query;
     const restaurant = await Restaurant.findOne({ user: req.userId });
@@ -324,10 +432,11 @@ export const updateRestaurantOrderStatus = async (req: Request, res: Response) =
 };
 
 export default {
-  updateRestaurantOrderStatus,
-  getMyRestaurantOrders,
+  getAllRestaurants,
   getMyRestaurant,
   createMyRestaurant,
   updateMyRestaurant,
-  uploadImage,
+  updateRestaurantStatus,
+  getMyRestaurantOrders,
+  updateRestaurantOrderStatus,
 };
diff --git a/src/controllers/OrderController.ts b/src/controllers/OrderController.ts
index d9e9e55c..5732d519 100644
--- a/src/controllers/OrderController.ts
+++ b/src/controllers/OrderController.ts
@@ -54,7 +54,10 @@ export const updateUserOrderStatus = async (req: Request, res: Response) => {
     }
 
     order.status = status;
+    console.log(`Updating order ${orderId} status from ${order.status} to ${status}`);
     await order.save();
+    console.log(`Order status updated: ${order.status}`);
+
 
     res.status(200).json(order);
   } catch (error) {
diff --git a/src/models/restaurant.ts b/src/models/restaurant.ts
index 43caaab9..80ddc51b 100644
--- a/src/models/restaurant.ts
+++ b/src/models/restaurant.ts
@@ -1,6 +1,8 @@
-import mongoose, { Schema, Document, Types } from "mongoose";
+// backend/src/models/restaurant.ts
 
+// backend/src/models/restaurant.ts
 
+import mongoose, { Schema, Document, Types } from "mongoose";
 
 // Define the MenuItem schema and type
 const menuItemSchema = new Schema({
@@ -33,7 +35,7 @@ const branchInfoSchema = new Schema({
   latitude: { type: Number, required: true },
   longitude: { type: Number, required: true },
   deliveryPrice: { type: Number, default: 0 }, // in cents
-  deliveryTime: { type: Number, default: 0 },  // in minutes or days, depending on business type
+  deliveryTime: { type: Number, default: 0 }, // in minutes or days, depending on business type
 });
 
 export type BranchInfoType = {
@@ -43,7 +45,7 @@ export type BranchInfoType = {
   latitude: number;
   longitude: number;
   deliveryPrice: number; // in cents
-  deliveryTime: number;  // in minutes or days
+  deliveryTime: number; // in minutes or days
 };
 
 // Define the Restaurant interface
@@ -66,7 +68,7 @@ interface IRestaurant extends Document {
 }
 
 // Define the Restaurant schema
-const RestaurantSchema = new Schema({
+const RestaurantSchema: Schema = new Schema({
   restaurantName: { type: String, required: true },
   branchesInfo: [branchInfoSchema],
   country: { type: String, required: true },
diff --git a/src/routes/MyRestaurantRoute.ts b/src/routes/MyRestaurantRoute.ts
index 30779e9b..6fd83c7a 100644
--- a/src/routes/MyRestaurantRoute.ts
+++ b/src/routes/MyRestaurantRoute.ts
@@ -1,11 +1,20 @@
 //  C:\Users\gertf\Desktop\FoodApp\backend\src\routes\MyRestaurantRoute.ts
 
+// backend/src/routes/MyRestaurantRoute.ts
+
+// backend/src/routes/MyRestaurantRoute.ts
+
 import express from "express";
 import multer from "multer";
-import { getMyRestaurant, createMyRestaurant, updateMyRestaurant } from "../controllers/MyRestaurantController";
+import {
+  getMyRestaurant,
+  createMyRestaurant,
+  updateMyRestaurant,
+  updateRestaurantOrderStatus,
+  getMyRestaurantOrders,
+} from "../controllers/MyRestaurantController";
 import { jwtCheck, jwtParse } from "../middleware/auth";
 import { validateMyRestaurantRequest } from "../middleware/validation";
-import  MyRestaurantController from "../controllers/MyRestaurantController";
 
 const router = express.Router();
 
@@ -17,37 +26,20 @@ const upload = multer({
   },
 });
 
-router.get(
-  "/order",
-  jwtCheck,
-  jwtParse,
-  MyRestaurantController.getMyRestaurantOrders
-);
-
-router.patch(
-  "/order/:orderId/status",
-  jwtCheck,
-  jwtParse,
-  MyRestaurantController.updateRestaurantOrderStatus
-);
-
-
-
+// Define menuItemsFields with the correct field names using dot notation
 const menuItemsFields = Array.from({ length: 40 }, (_, i) => ({
-  name: `menuItems[${i}].menuItemImageFile`,
+  name: `menuItems[${i}].menuItemImageFile`, // Matches frontend with dot notation
   maxCount: 1,
 }));
 
+// Define the fields Multer should handle
 const restaurantUpload = upload.fields([
-  { name: "restaurantImageFile", maxCount: 1 },
+  { name: "restaurantImageFile", maxCount: 1 }, // Matches frontend
   ...menuItemsFields,
 ]);
 
-// GET restaurant for logged-in user actually no validation needed but works with jwt & parse, 
-router.get("/",
-   jwtCheck,
-    jwtParse,
-    getMyRestaurant);
+// GET restaurant for logged-in user
+router.get("/", jwtCheck, jwtParse, getMyRestaurant);
 
 // POST (create) a new restaurant
 router.post(
@@ -69,5 +61,20 @@ router.put(
   updateMyRestaurant
 );
 
-export default router;
+// PATCH (update order status)
+router.patch(
+  "/order/:id/status",
+  jwtCheck,
+  jwtParse,
+  updateRestaurantOrderStatus
+);
 
+// GET (fetch orders)
+router.get(
+  "/order",
+  jwtCheck,
+  jwtParse,
+  getMyRestaurantOrders
+);
+
+export default router;
diff --git a/src/utils/commitdiff.ts b/src/utils/commitdiff.ts
new file mode 100644
index 00000000..744f62d8
--- /dev/null
+++ b/src/utils/commitdiff.ts
@@ -0,0 +1,2 @@
+// git diff 82ce93e0 dcf3c5bd --color=always > backend_diff.txt
+// git diff 31c7666 e34eb6e --color=always > frontend_diff.txt
\ No newline at end of file
diff --git a/src/utils/gitcodes.ts b/src/utils/gitcodes.ts
new file mode 100644
index 00000000..65bd495d
--- /dev/null
+++ b/src/utils/gitcodes.ts
@@ -0,0 +1,2 @@
+// git archive -o reset_commit.zip 82ce93e0
+// git archive -o latest_commit.zip HEAD
diff --git a/tsconfig.json b/tsconfig.json
index a90e532a..07830306 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -2,28 +2,24 @@
 
 {
   "compilerOptions": {
-    "outDir": "./dist",
-    "typeRoots": ["./node_modules/@types", "./src/types"],
-    "types": ["node"],
-   
-
-    /* Language and Environment */
-    "target": "es2016",
-
-    /* Modules */
-    "module": "commonjs",
-
-    /* Interop Constraints */
-    "esModuleInterop": true,
-    "forceConsistentCasingInFileNames": true,
-
-    /* Type Checking */
-    "strict": true,
-    "skipLibCheck": true
+    "outDir": "./dist",                   // Specifies output directory for compiled files
+    "rootDir": "./src",                   // Specifies the root directory of input files
+    "typeRoots": ["./node_modules/@types", "./src/types"], // Includes custom and default type definitions
+    "types": ["node", "express"],         // Includes specific type definitions
+    "target": "ES2016",                   // Compiles for ES2016
+    "module": "commonjs",                 // Uses CommonJS module system
+    "esModuleInterop": true,              // Enables default imports for CommonJS modules
+    "forceConsistentCasingInFileNames": true, // Enforces consistent casing in import paths
+    "strict": true,                       // Enables all strict type-checking options
+    "skipLibCheck": true                  // Skips type-checking for `node_modules`
   },
   "include": [
-    "src/**/*.ts",
-    "src/**/*.d.ts",
-    "types/**/*.d.ts"
+    "src/**/*.ts",                        // Includes all TypeScript files in `src`
+    "src/**/*.d.ts",                      // Includes all declaration files in `src`
+    "types/**/*.d.ts"                     // Includes all declaration files in `types`
+  ],
+  "exclude": [
+    "node_modules",                       // Excludes `node_modules` directory
+    "dist"                                // Excludes the output directory
   ]
 }
diff --git a/tsconfig.tsbuildinfo b/tsconfig.tsbuildinfo
new file mode 100644
index 00000000..3bced137
--- /dev/null
+++ b/tsconfig.tsbuildinfo
@@ -0,0 +1 @@
+{"root":["./src/index.ts","./src/controllers/adminactionscontroller.ts","./src/controllers/branchdeliverycontroller.ts","./src/controllers/myrestaurantcontroller.ts","./src/controllers/myusercontroller.ts","./src/controllers/ordercontroller.ts","./src/controllers/restaurantcontroller.ts","./src/controllers/orderusercontroller.ts","./src/middleware/auth.ts","./src/middleware/validation.ts","./src/models/admin.ts","./src/models/order.ts","./src/models/restaurant.ts","./src/models/user.ts","./src/routes/myrestaurantroute.ts","./src/routes/myuserroute.ts","./src/routes/orderroute.ts","./src/routes/restaurantroute.ts","./src/routes/adminroutes.ts","./src/routes/cityroutes.ts","./src/routes/orderuserroute.ts","./src/types/clamav.js.d.ts","./src/types/express.d.ts","./src/types/file-type.d.ts","./src/types/leo-profanity.d.ts","./src/utils/cloudinarymongodbimageclean.ts","./src/utils/commitdiff.ts","./src/utils/deliverypricing.ts","./src/utils/deliveryutils.ts","./src/utils/gitcodes.ts","./src/utils/imagemoderator.ts","./src/utils/printstructure.ts","./src/utils/textfilter.ts","./src/utils/whitelistadd.ts"],"version":"5.7.2"}
\ No newline at end of file

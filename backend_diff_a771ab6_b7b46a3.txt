diff --git a/src/controllers/MyRestaurantController.ts b/src/controllers/MyRestaurantController.ts
index 926f12b..8ade62a 100644
--- a/src/controllers/MyRestaurantController.ts
+++ b/src/controllers/MyRestaurantController.ts
@@ -1,8 +1,7 @@
-// // C:\Users\gertf\Desktop\FoodApp\backend\src\controllers\MyRestaurantController.ts
-// // This controller handles the logic for creating, updating, 
-// // and retrieving restaurant data,
-// // including image uploads and handling menu items.
-
+// C:\Users\gertf\Desktop\FoodApp\backend\src\controllers\MyRestaurantController.ts
+// This controller handles the logic for creating, updating, 
+// and retrieving restaurant data,
+// including image uploads and handling menu items.
 import { Request, Response } from "express";
 import Restaurant from "../models/restaurant";
 import mongoose from "mongoose";
@@ -27,6 +26,7 @@ const uploadImage = async (file: Express.Multer.File): Promise<string> => {
   }
 };
 
+// Get all restaurants for the logged-in user
 export const getAllRestaurants = async (req: Request, res: Response): Promise<void> => {
   try {
     const restaurants = await Restaurant.find().exec();
@@ -42,10 +42,14 @@ export const getAllRestaurants = async (req: Request, res: Response): Promise<vo
   }
 };
 
+// Get restaurant details by the logged-in user
+// Example of using `userId` in the controller
+// C:\Users\gertf\Desktop\FoodApp\backend\src\controllers\MyRestaurantController.ts
+
 export const getMyRestaurant = async (req: Request, res: Response): Promise<void> => {
   try {
-    const userId = req.userId;
-
+    const userId = req.userId; // Use req.userId set by jwtParse middleware
+    
     if (!userId) {
       res.status(400).json({ message: "User ID not provided" });
       return;
@@ -64,7 +68,7 @@ export const getMyRestaurant = async (req: Request, res: Response): Promise<void
         menuItems: [],
         restaurantImageUrl: "",
         user: userId,
-        email: req.userEmail || "",
+        email: req.userEmail || "", // Use req.userEmail for email
         status: "pending",
         contractType: "",
         contractId: "",
@@ -80,6 +84,9 @@ export const getMyRestaurant = async (req: Request, res: Response): Promise<void
   }
 };
 
+
+// Create a new restaurant
+// Create a new restaurant
 export const createMyRestaurant = async (req: Request, res: Response): Promise<void> => {
   try {
     const existingRestaurant = await Restaurant.findOne({ user: req.userId }).exec();
@@ -97,7 +104,7 @@ export const createMyRestaurant = async (req: Request, res: Response): Promise<v
     const restaurant = new Restaurant({
       ...req.body,
       user: new mongoose.Types.ObjectId(req.userId),
-      email: user.email || "",
+      email: user.email || "", // Save user's email
       lastUpdated: new Date(),
     });
 
@@ -145,6 +152,8 @@ export const createMyRestaurant = async (req: Request, res: Response): Promise<v
   }
 };
 
+
+// Update an existing restaurant
 export const updateMyRestaurant = async (req: Request, res: Response): Promise<void> => {
   try {
     const restaurant = await Restaurant.findOne({ user: req.userId }).exec();
@@ -166,18 +175,20 @@ export const updateMyRestaurant = async (req: Request, res: Response): Promise<v
     restaurant.estimatedDeliveryTime = req.body.estimatedDeliveryTime;
     restaurant.cuisines = req.body.cuisines;
     restaurant.wholesale = req.body.wholesale;
-    restaurant.email = user.email || "";
+    restaurant.email = user.email || ""; // Update email field
     restaurant.lastUpdated = new Date();
 
     const files = req.files as { [fieldname: string]: Express.Multer.File[] } | undefined;
 
+    // Handle restaurant image update
     if (files?.restaurantImageFile) {
       const fileBuffer = files.restaurantImageFile[0].buffer;
       await checkImageForInappropriateContent(fileBuffer);
       restaurant.restaurantImageUrl = await uploadImage(files.restaurantImageFile[0]);
     }
 
-    restaurant.menuItems = [];
+    // Handle menu items update
+    restaurant.menuItems = []; // Clear the existing menuItems to update with the new ones
     if (files) {
       for (let i = 0; i < req.body.menuItems.length; i++) {
         const field = `menuItems[${i}].menuItemImageFile`;
@@ -210,6 +221,7 @@ export const updateMyRestaurant = async (req: Request, res: Response): Promise<v
   }
 };
 
+// Update the status of a restaurant
 export const updateRestaurantStatus = async (req: Request, res: Response): Promise<void> => {
   try {
     const restaurantId = req.params.id;
@@ -238,3 +250,4 @@ export const updateRestaurantStatus = async (req: Request, res: Response): Promi
     }
   }
 };
+
diff --git a/src/controllers/RestaurantController.ts b/src/controllers/RestaurantController.ts
index a52a077..f0931f0 100644
--- a/src/controllers/RestaurantController.ts
+++ b/src/controllers/RestaurantController.ts
@@ -1,122 +1,69 @@
-// // C:\Users\gertf\Desktop\FoodApp\backend\src\controllers\RestaurantController.ts
-// import { Request, Response } from "express";
-// import Restaurant from "../models/restaurant";
-
-// export const getCities = async (req: Request, res: Response) => {
-//   try {
-//     // Fetch distinct cities from the Restaurant collection
-//     const cities = await Restaurant.distinct("city");
-//     res.json(cities);
-//   } catch (error) {
-//     console.error("Error fetching cities:", error);
-//     res.status(500).json({ message: "Error fetching cities" });
-//   }
-// };
-
-// const getRestaurant = async (req: Request, res: Response) => {
-//   try {
-//     const restaurantId = req.params.restaurantId;
-
-//     // Fetch the restaurant by ID from the database
-//     const restaurant = await Restaurant.findById(restaurantId);
-    
-//     if (!restaurant) {
-//       return res.status(404).json({ message: "restaurant not found" });
-//     }
-
-//     res.json(restaurant);
-//   } catch (error) {
-//     console.log(error);
-//     res.status(500).json({ message: "something went wrong" });
-//   }
-// };
-
-// export const searchRestaurant = async (req: Request, res: Response) => {
-//   try {
-//     const city = req.params.city;
-//     const searchQuery = (req.query.searchQuery as string) || "";
-//     const selectedCuisines = (req.query.selectedCuisines as string) || "";
-//     const selectedBusinessType = (req.query.selectedBusinessType as string) || "";
-//     const sortOption = (req.query.sortOption as string) || "lastUpdated";
-//     const page = parseInt(req.query.page as string) || 1;
-
-//     let query: any = {
-//       city: { $regex: new RegExp(city, "i") },
-//       status: "approved" // Filter for approved restaurants only
-//     };
-
-//     if (selectedBusinessType) {
-//       query["wholesale"] = selectedBusinessType === "Wholesale";
-//     }
-
-//     if (selectedCuisines) {
-//       const cuisinesArray = selectedCuisines.split(",").map(cuisine => new RegExp(cuisine, "i"));
-//       query["cuisines"] = { $all: cuisinesArray };
-//     }
-
-//     if (searchQuery) {
-//       const searchRegex = new RegExp(searchQuery, "i");
-//       query["$or"] = [
-//         { restaurantName: searchRegex },
-//         { cuisines: { $in: [searchRegex] } },
-//       ];
-//     }
-
-//     const pageSize = 10;
-//     const skip = (page - 1) * pageSize;
-
-//     const restaurants = await Restaurant.find(query)
-//       .sort({ [sortOption]: 1 })
-//       .skip(skip)
-//       .limit(pageSize)
-//       .lean();
-
-//     const total = await Restaurant.countDocuments(query);
-
-//     res.json({
-//       data: restaurants,
-//       pagination: {
-//         total,
-//         page,
-//         pages: Math.ceil(total / pageSize),
-//       },
-//     });
-//   } catch (error) {
-//     console.log(error);
-//     res.status(500).json({ message: "Something went wrong" });
-//   }
-// };
-// export default {
-//   getRestaurant,
-//   searchRestaurant,
-//   getCities,
-// };
-// C:\Users\gertf\Desktop\FoodApp\backend\src\controllers\RestaurantController.ts
+// src/controllers/RestaurantController.ts
+
 import { Request, Response } from "express";
 import Restaurant from "../models/restaurant";
 
-// Function to search restaurants based on city, only approved restaurants are returned
-export const searchRestaurant = async (req: Request, res: Response) => {
+
+
+export const getCities = async (req: Request, res: Response) => {
+  try {
+    // Fetch distinct cities from the Restaurant collection
+    const cities = await Restaurant.distinct("city");
+    res.json(cities);
+  } catch (error) {
+    console.error("Error fetching cities:", error);
+    res.status(500).json({ message: "Error fetching cities" });
+  }
+};
+
+
+const getRestaurant = async (req: Request, res: Response) => {
+  try {
+    const restaurantId = req.params.restaurantId;
+
+    // Fetch the restaurant by ID from the database
+    const restaurant = await Restaurant.findById(restaurantId);
+    
+    if (!restaurant) {
+      return res.status(404).json({ message: "restaurant not found" });
+    }
+
+    res.json(restaurant);
+  } catch (error) {
+    console.log(error);
+    res.status(500).json({ message: "something went wrong" });
+  }
+};
+
+const searchRestaurant = async (req: Request, res: Response) => {
   try {
     const city = req.params.city;
+
     const searchQuery = (req.query.searchQuery as string) || "";
     const selectedCuisines = (req.query.selectedCuisines as string) || "";
-    const selectedBusinessType = (req.query.selectedBusinessType as string) || "";
     const sortOption = (req.query.sortOption as string) || "lastUpdated";
     const page = parseInt(req.query.page as string) || 1;
 
-    // Query to match restaurants in the given city with status "approved"
-    let query: any = {
-      city: { $regex: new RegExp(city, "i") },
-      status: "approved", // Filter to return only approved restaurants
-    };
-
-    if (selectedBusinessType) {
-      query["wholesale"] = selectedBusinessType === "Wholesale";
+    let query: any = {};
+    query["city"] = new RegExp(city, "i");
+
+    const cityCheck = await Restaurant.countDocuments(query);
+    if (cityCheck === 0) {
+      return res.status(404).json({
+        data: [],
+        pagination: {
+          total: 0,
+          page: 1,
+          pages: 1,
+        },
+      });
     }
 
     if (selectedCuisines) {
-      const cuisinesArray = selectedCuisines.split(",").map((cuisine) => new RegExp(cuisine, "i"));
+      const cuisinesArray = selectedCuisines
+        .split(",")
+        .map(cuisine => new RegExp(cuisine, "i"));
+
       query["cuisines"] = { $all: cuisinesArray };
     }
 
@@ -131,7 +78,6 @@ export const searchRestaurant = async (req: Request, res: Response) => {
     const pageSize = 10;
     const skip = (page - 1) * pageSize;
 
-    // Fetch only approved restaurants from the database
     const restaurants = await Restaurant.find(query)
       .sort({ [sortOption]: 1 })
       .skip(skip)
@@ -140,50 +86,24 @@ export const searchRestaurant = async (req: Request, res: Response) => {
 
     const total = await Restaurant.countDocuments(query);
 
-    // Return the filtered restaurants with pagination
-    res.json({
+    const response = {
       data: restaurants,
       pagination: {
         total,
         page,
         pages: Math.ceil(total / pageSize),
       },
-    });
-  } catch (error) {
-    console.error("Error searching restaurants:", error);
-    res.status(500).json({ message: "Something went wrong" });
-  }
-};
-
-// Function to get all distinct cities that have restaurants
-export const getCities = async (req: Request, res: Response) => {
-  try {
-    const cities = await Restaurant.distinct("city");
-    res.json(cities);
-  } catch (error) {
-    console.error("Error fetching cities:", error);
-    res.status(500).json({ message: "Error fetching cities" });
-  }
-};
-
-const getRestaurant = async (req: Request, res: Response) => {
-  try {
-    const restaurantId = req.params.restaurantId;
-
-    const restaurant = await Restaurant.findById(restaurantId);
-    if (!restaurant) {
-      return res.status(404).json({ message: "Restaurant not found" });
-    }
+    };
 
-    res.json(restaurant);
+    res.json(response);
   } catch (error) {
-    console.error("Error fetching restaurant:", error);
+    console.log(error);
     res.status(500).json({ message: "Something went wrong" });
   }
 };
 
 export default {
+  getRestaurant,
   searchRestaurant,
   getCities,
-  getRestaurant,
 };
diff --git a/src/routes/MyRestaurantRoute.ts b/src/routes/MyRestaurantRoute.ts
index a926fdd..659cef0 100644
--- a/src/routes/MyRestaurantRoute.ts
+++ b/src/routes/MyRestaurantRoute.ts
@@ -1,59 +1,5 @@
-// // C:\Users\gertf\Desktop\FoodApp\backend\src\routes\MyRestaurantRoute.ts
+// C:\Users\gertf\Desktop\FoodApp\backend\src\routes\MyRestaurantRoute.ts
 
-// import express from "express";
-// import multer from "multer";
-// import { 
-//   getMyRestaurant, 
-//   createMyRestaurant, 
-//   updateMyRestaurant 
-// } from "../controllers/MyRestaurantController";
-// import { jwtCheck, jwtParse } from "../middleware/auth";
-// import { validateMyRestaurantRequest } from "../middleware/validation";
-
-// const router = express.Router();
-
-// const storage = multer.memoryStorage();
-// const upload = multer({
-//   storage: storage,
-//   limits: {
-//     fileSize: 5 * 1024 * 1024, // 5MB
-//   },
-// });
-
-// const menuItemsFields = Array.from({ length: 40 }, (_, i) => ({
-//   name: `menuItems[${i}].menuItemImageFile`,
-//   maxCount: 1,
-// }));
-
-// const restaurantUpload = upload.fields([
-//   { name: "restaurantImageFile", maxCount: 1 },
-//   ...menuItemsFields,
-// ]);
-
-// // GET restaurant for logged-in user
-// router.get("/", jwtCheck, jwtParse, getMyRestaurant);
-
-// // POST (create) a new restaurant
-// router.post(
-//   "/",
-//   restaurantUpload,
-//   validateMyRestaurantRequest,
-//   jwtCheck,
-//   jwtParse,
-//   createMyRestaurant
-// );
-
-// // PUT (update) existing restaurant
-// router.put(
-//   "/",
-//   restaurantUpload,
-//   validateMyRestaurantRequest,
-//   jwtCheck,
-//   jwtParse,
-//   updateMyRestaurant
-// );
-
-// export default router;
 import express from "express";
 import multer from "multer";
 import { 
diff --git a/src/routes/RestaurantRoute.ts b/src/routes/RestaurantRoute.ts
index 3a10f02..6f339ba 100644
--- a/src/routes/RestaurantRoute.ts
+++ b/src/routes/RestaurantRoute.ts
@@ -1,40 +1,5 @@
-
-// import express from "express";
-// import { param } from "express-validator";
-// import RestaurantController, { getCities } from "../controllers/RestaurantController";
-// import { handleValidationErrors } from "../middleware/validation";
-
-// const router = express.Router();
-
-// // Get a restaurant by its ID (public access)
-// router.get(
-//   "/:restaurantId",
-//   param("restaurantId")
-//     .isString()
-//     .trim()
-//     .notEmpty()
-//     .withMessage("RestaurantId parameter must be a valid string"),
-//   handleValidationErrors,
-//   RestaurantController.getRestaurant
-// );
-
-// // Search for restaurants in a specific city (public access)
-// router.get(
-//   "/search/:city",
-//   param("city")
-//     .isString()
-//     .trim()
-//     .notEmpty()
-//     .withMessage("City parameter must be a valid string"),
-//   handleValidationErrors,
-//   RestaurantController.searchRestaurant
-// );
-
-// // Route to get available cities
-// router.get("/cities", getCities);
-
-// export default router;
 // C:\Users\gertf\Desktop\FoodApp\backend\src\routes\RestaurantRoute.ts
+
 import express from "express";
 import { param } from "express-validator";
 import RestaurantController, { getCities } from "../controllers/RestaurantController";
@@ -42,7 +7,7 @@ import { handleValidationErrors } from "../middleware/validation";
 
 const router = express.Router();
 
-// Route to get a restaurant by its ID (public access)
+// Get a restaurant by its ID (public access)
 router.get(
   "/:restaurantId",
   param("restaurantId")
@@ -54,8 +19,7 @@ router.get(
   RestaurantController.getRestaurant
 );
 
-// Route to search for restaurants in a specific city (public access)
-// Only approved restaurants will be shown
+// Search for restaurants in a specific city (public access)
 router.get(
   "/search/:city",
   param("city")
diff --git a/src/utils/foodAppStructure.json b/src/utils/foodAppStructure.json
index 7b92729..fc4d788 100644
--- a/src/utils/foodAppStructure.json
+++ b/src/utils/foodAppStructure.json
@@ -88,7 +88,6 @@
         "ProtectedRoute.tsx": "file"
       },
       "components": {
-        "BusinessTypeFilter.tsx": "file",
         "CuisineFilter.tsx": "file",
         "Footer.tsx": "file",
         "header.tsx": "file",

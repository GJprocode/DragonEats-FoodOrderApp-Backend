[1mdiff --git a/backend_diff.txt b/backend_diff.txt[m
[1mindex db216999..e69de29b 100644[m
[1m--- a/backend_diff.txt[m
[1m+++ b/backend_diff.txt[m
[36m@@ -1,401 +0,0 @@[m
[31m-[1mdiff --git a/src/controllers/MyRestaurantController.ts b/src/controllers/MyRestaurantController.ts[m[m
[31m-[1mindex d1416979..cce03591 100644[m[m
[31m-[1m--- a/src/controllers/MyRestaurantController.ts[m[m
[31m-[1m+++ b/src/controllers/MyRestaurantController.ts[m[m
[31m-[36m@@ -1,3 +1,5 @@[m[m
[31m-[32m+[m[32m// backend/src/controllers/MyRestaurantController.ts[m[m
[31m-[32m+[m[m
[31m- import { Request, Response } from "express";[m[m
[31m- import Restaurant from "../models/restaurant";[m[m
[31m- import mongoose from "mongoose";[m[m
[31m-[36m@@ -74,8 +76,6 @@[m [mexport const getMyRestaurant = async (req: Request, res: Response) => {[m[m
[31m-       await restaurant.save();[m[m
[31m-     }[m[m
[31m- [m[m
[31m-[31m-    // console.log("Raw restaurant from DB:", restaurant);[m[m
[31m-[31m-[m[m
[31m-     // Convert the entire restaurant document to a plain object once[m[m
[31m-     const restaurantObj = restaurant.toObject();[m[m
[31m- [m[m
[31m-[36m@@ -96,7 +96,6 @@[m [mexport const getMyRestaurant = async (req: Request, res: Response) => {[m[m
[31m- [m[m
[31m-     // Convert to pure JSON object[m[m
[31m-     const finalRestaurant = JSON.parse(JSON.stringify(formattedRestaurant));[m[m
[31m-[31m-    // console.log("Final pure JSON restaurant sent to frontend:", finalRestaurant);[m[m
[31m- [m[m
[31m-     res.json(finalRestaurant);[m[m
[31m-   } catch (error) {[m[m
[31m-[36m@@ -107,21 +106,77 @@[m [mexport const getMyRestaurant = async (req: Request, res: Response) => {[m[m
[31m- [m[m
[31m- export const createMyRestaurant = async (req: Request, res: Response): Promise<void> => {[m[m
[31m-   try {[m[m
[31m-[32m+[m[32m    const existingRestaurant = await Restaurant.findOne({ user: req.userId }).exec();[m[m
[31m-[32m+[m[32m    if (existingRestaurant) {[m[m
[31m-[32m+[m[32m      res.status(409).json({ message: "User restaurant already exists" });[m[m
[31m-[32m+[m[32m      return;[m[m
[31m-[32m+[m[32m    }[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m    const user = await User.findById(req.userId);[m[m
[31m-[32m+[m[32m    if (!user) {[m[m
[31m-[32m+[m[32m      res.status(404).json({ message: "User not found" });[m[m
[31m-[32m+[m[32m      return;[m[m
[31m-[32m+[m[32m    }[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m    // Convert wholesale to boolean[m[m
[31m-[32m+[m[32m    const wholesale = req.body.wholesale === "true";[m[m
[31m-[32m+[m[m
[31m-     const restaurant = new Restaurant({[m[m
[31m-[31m-      ...req.body,[m[m
[31m-[32m+[m[32m      restaurantName: req.body.restaurantName,[m[m
[31m-[32m+[m[32m      cellphone: req.body.cellphone,[m[m
[31m-[32m+[m[32m      branchesInfo: req.body.branchesInfo.map((branch: any) => ({[m[m
[31m-[32m+[m[32m        cities: branch.cities,[m[m
[31m-[32m+[m[32m        branchName: branch.branchName,[m[m
[31m-[32m+[m[32m        latitude: branch.latitude,[m[m
[31m-[32m+[m[32m        longitude: branch.longitude,[m[m
[31m-[32m+[m[32m        deliveryPrice: Math.round(branch.deliveryPrice * 100), // Convert to cents[m[m
[31m-[32m+[m[32m        deliveryTime: branch.deliveryTime,[m[m
[31m-[32m+[m[32m      })),[m[m
[31m-[32m+[m[32m      country: req.body.country,[m[m
[31m-[32m+[m[32m      wholesale: wholesale, // Saved as boolean[m[m
[31m-[32m+[m[32m      cuisines: req.body.cuisines,[m[m
[31m-[32m+[m[32m      menuItems: req.body.menuItems.map((item: any) => ({[m[m
[31m-[32m+[m[32m        name: item.name,[m[m
[31m-[32m+[m[32m        price: Math.round(item.price * 100), // Convert to cents[m[m
[31m-[32m+[m[32m        imageUrl: item.imageUrl || "",[m[m
[31m-[32m+[m[32m      })),[m[m
[31m-       user: new mongoose.Types.ObjectId(req.userId),[m[m
[31m-[31m-      email: req.userEmail || "",[m[m
[31m-[32m+[m[32m      email: user.email || "",[m[m
[31m-[32m+[m[32m      status: "submitted",[m[m
[31m-       lastUpdated: new Date(),[m[m
[31m-     });[m[m
[31m- [m[m
[31m-[32m+[m[32m    const files = req.files as { [fieldname: string]: Express.Multer.File[] } | undefined;[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m    // Handle restaurant image[m[m
[31m-[32m+[m[32m    if (files?.restaurantImageFile && files.restaurantImageFile.length > 0) {[m[m
[31m-[32m+[m[32m      const file = files.restaurantImageFile[0];[m[m
[31m-[32m+[m[32m      const imageUrl = await uploadImage(file);[m[m
[31m-[32m+[m[32m      restaurant.restaurantImageUrl = imageUrl;[m[m
[31m-[32m+[m[32m    }[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m    // Handle menu item images[m[m
[31m-[32m+[m[32m    if (files) {[m[m
[31m-[32m+[m[32m      for (let i = 0; i < req.body.menuItems.length; i++) {[m[m
[31m-[32m+[m[32m        const field = `menuItems[${i}].menuItemImageFile`; // Use dot notation[m[m
[31m-[32m+[m[32m        if (files[field] && files[field].length > 0) {[m[m
[31m-[32m+[m[32m          const file = files[field][0];[m[m
[31m-[32m+[m[32m          const imageUrl = await uploadImage(file);[m[m
[31m-[32m+[m[32m          restaurant.menuItems[i].imageUrl = imageUrl;[m[m
[31m-[32m+[m[32m        }[m[m
[31m-[32m+[m[32m      }[m[m
[31m-[32m+[m[32m    }[m[m
[31m-[32m+[m[m
[31m-     await restaurant.save();[m[m
[31m- [m[m
[31m-[32m+[m[32m    // Prepare response[m[m
[31m-     const restaurantObj = restaurant.toObject();[m[m
[31m-     const formattedResponse = {[m[m
[31m-       ...restaurantObj,[m[m
[31m-       branchesInfo: restaurantObj.branchesInfo.map((branch: any) => ({[m[m
[31m-         ...branch,[m[m
[31m-         deliveryPrice: branch.deliveryPrice / 100,[m[m
[31m-[32m+[m[32m        deliveryTime: branch.deliveryTime,[m[m
[31m-       })),[m[m
[31m-       menuItems: restaurantObj.menuItems.map((menuItem: any) => ({[m[m
[31m-         ...menuItem,[m[m
[31m-[36m@@ -131,9 +186,14 @@[m [mexport const createMyRestaurant = async (req: Request, res: Response): Promise<v[m[m
[31m- [m[m
[31m-     const finalResponse = JSON.parse(JSON.stringify(formattedResponse));[m[m
[31m-     res.status(201).json(finalResponse);[m[m
[31m-[31m-  } catch (error) {[m[m
[31m-[31m-    console.error("Error creating restaurant:", error);[m[m
[31m-[31m-    res.status(500).json({ message: "Error creating restaurant" });[m[m
[31m-[32m+[m[32m  } catch (error: unknown) {[m[m
[31m-[32m+[m[32m    if (error instanceof Error) {[m[m
[31m-[32m+[m[32m      console.error("Error creating restaurant:", error.message);[m[m
[31m-[32m+[m[32m      res.status(500).json({ message: "Error creating restaurant", error: error.message });[m[m
[31m-[32m+[m[32m    } else {[m[m
[31m-[32m+[m[32m      console.error("Unexpected error creating restaurant:", error);[m[m
[31m-[32m+[m[32m      res.status(500).json({ message: "Unexpected error creating restaurant" });[m[m
[31m-[32m+[m[32m    }[m[m
[31m-   }[m[m
[31m- };[m[m
[31m- [m[m
[31m-[36m@@ -145,36 +205,80 @@[m [mexport const updateMyRestaurant = async (req: Request, res: Response) => {[m[m
[31m-       return res.status(404).json({ message: "Restaurant not found" });[m[m
[31m-     }[m[m
[31m- [m[m
[31m-[32m+[m[32m    // Convert wholesale to boolean if provided[m[m
[31m-[32m+[m[32m    if (req.body.wholesale !== undefined) {[m[m
[31m-[32m+[m[32m      restaurant.wholesale = req.body.wholesale === "true";[m[m
[31m-[32m+[m[32m    }[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m    // Update basic fields[m[m
[31m-     restaurant.restaurantName = req.body.restaurantName || restaurant.restaurantName;[m[m
[31m-[32m+[m[32m    restaurant.cellphone = req.body.cellphone || restaurant.cellphone;[m[m
[31m-     restaurant.country = req.body.country || restaurant.country;[m[m
[31m-     restaurant.cuisines = Array.isArray(req.body.cuisines) ? req.body.cuisines : restaurant.cuisines;[m[m
[31m-[31m-    restaurant.wholesale = typeof req.body.wholesale === "boolean" ? req.body.wholesale : restaurant.wholesale;[m[m
[31m-[31m-    restaurant.cellphone = req.body.cellphone || restaurant.cellphone;[m[m
[31m- [m[m
[31m-[32m+[m[32m    // Update branchesInfo[m[m
[31m-     if (Array.isArray(req.body.branchesInfo)) {[m[m
[31m-       restaurant.branchesInfo = req.body.branchesInfo.map((branch: any, index: number) => ({[m[m
[31m-         _id: branch._id || (restaurant.branchesInfo[index]?._id || new mongoose.Types.ObjectId()),[m[m
[31m-         cities: branch.cities || restaurant.branchesInfo[index]?.cities || "Default City",[m[m
[31m-[31m-        branchName: branch.branchName || restaurant.branchesInfo[index]?.branchName || `Branch ${index + 1}`,[m[m
[31m-[31m-        latitude: typeof branch.latitude === "number" ? branch.latitude : (restaurant.branchesInfo[index]?.latitude || 0),[m[m
[31m-[31m-        longitude: typeof branch.longitude === "number" ? branch.longitude : (restaurant.branchesInfo[index]?.longitude || 0),[m[m
[31m-[31m-        deliveryPrice: branch.deliveryPrice != null ? Math.round(branch.deliveryPrice * 100) : (restaurant.branchesInfo[index]?.deliveryPrice || 0),[m[m
[31m-[31m-        deliveryTime: branch.deliveryTime != null ? branch.deliveryTime : (restaurant.branchesInfo[index]?.deliveryTime || 0),[m[m
[31m-[32m+[m[32m        branchName:[m[m
[31m-[32m+[m[32m          branch.branchName || restaurant.branchesInfo[index]?.branchName || `Branch ${index + 1}`,[m[m
[31m-[32m+[m[32m        latitude:[m[m
[31m-[32m+[m[32m          typeof branch.latitude === "number"[m[m
[31m-[32m+[m[32m            ? branch.latitude[m[m
[31m-[32m+[m[32m            : restaurant.branchesInfo[index]?.latitude || 0,[m[m
[31m-[32m+[m[32m        longitude:[m[m
[31m-[32m+[m[32m          typeof branch.longitude === "number"[m[m
[31m-[32m+[m[32m            ? branch.longitude[m[m
[31m-[32m+[m[32m            : restaurant.branchesInfo[index]?.longitude || 0,[m[m
[31m-[32m+[m[32m        deliveryPrice:[m[m
[31m-[32m+[m[32m          branch.deliveryPrice != null[m[m
[31m-[32m+[m[32m            ? Math.round(branch.deliveryPrice * 100)[m[m
[31m-[32m+[m[32m            : restaurant.branchesInfo[index]?.deliveryPrice || 0,[m[m
[31m-[32m+[m[32m        deliveryTime:[m[m
[31m-[32m+[m[32m          branch.deliveryTime != null ? branch.deliveryTime : restaurant.branchesInfo[index]?.deliveryTime || 0,[m[m
[31m-       }));[m[m
[31m-     }[m[m
[31m- [m[m
[31m-[32m+[m[32m    // Update menuItems[m[m
[31m-     if (Array.isArray(req.body.menuItems)) {[m[m
[31m-[31m-      restaurant.menuItems = req.body.menuItems.map((menuItem: any, i: number) => ({[m[m
[31m-[31m-        _id: menuItem._id || (restaurant.menuItems[i]?._id || new mongoose.Types.ObjectId()),[m[m
[31m-[31m-        name: menuItem.name || restaurant.menuItems[i]?.name || "Unnamed Item",[m[m
[31m-[31m-        price: menuItem.price != null ? Math.round(menuItem.price * 100) : (restaurant.menuItems[i]?.price || 0),[m[m
[31m-[31m-        imageUrl: menuItem.imageUrl || restaurant.menuItems[i]?.imageUrl || "/path/to/placeholder-image.jpg",[m[m
[31m-[32m+[m[32m      restaurant.menuItems = req.body.menuItems.map((menuItem: any, index: number) => ({[m[m
[31m-[32m+[m[32m        _id: menuItem._id || (restaurant.menuItems[index]?._id || new mongoose.Types.ObjectId()),[m[m
[31m-[32m+[m[32m        name: menuItem.name || restaurant.menuItems[index]?.name || "Unnamed Item",[m[m
[31m-[32m+[m[32m        price:[m[m
[31m-[32m+[m[32m          menuItem.price != null ? Math.round(menuItem.price * 100) : restaurant.menuItems[index]?.price || 0,[m[m
[31m-[32m+[m[32m        imageUrl:[m[m
[31m-[32m+[m[32m          menuItem.imageUrl ||[m[m
[31m-[32m+[m[32m          restaurant.menuItems[index]?.imageUrl ||[m[m
[31m-[32m+[m[32m          "/path/to/placeholder-image.jpg",[m[m
[31m-       }));[m[m
[31m-     }[m[m
[31m- [m[m
[31m-[32m+[m[32m    const files = req.files as { [fieldname: string]: Express.Multer.File[] } | undefined;[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m    // Handle restaurant image update[m[m
[31m-[32m+[m[32m    if (files?.restaurantImageFile && files.restaurantImageFile.length > 0) {[m[m
[31m-[32m+[m[32m      const file = files.restaurantImageFile[0];[m[m
[31m-[32m+[m[32m      const imageUrl = await uploadImage(file);[m[m
[31m-[32m+[m[32m      restaurant.restaurantImageUrl = imageUrl;[m[m
[31m-[32m+[m[32m    }[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m    // Handle menu item images update[m[m
[31m-[32m+[m[32m    if (files) {[m[m
[31m-[32m+[m[32m      for (let i = 0; i < req.body.menuItems.length; i++) {[m[m
[31m-[32m+[m[32m        const field = `menuItems[${i}].menuItemImageFile`; // Use dot notation[m[m
[31m-[32m+[m[32m        if (files[field] && files[field].length > 0) {[m[m
[31m-[32m+[m[32m          const file = files[field][0];[m[m
[31m-[32m+[m[32m          const imageUrl = await uploadImage(file);[m[m
[31m-[32m+[m[32m          restaurant.menuItems[i].imageUrl = imageUrl;[m[m
[31m-[32m+[m[32m        }[m[m
[31m-[32m+[m[32m      }[m[m
[31m-[32m+[m[32m    }[m[m
[31m-[32m+[m[m
[31m-     restaurant.lastUpdated = new Date();[m[m
[31m-     await restaurant.save();[m[m
[31m- [m[m
[31m-[32m+[m[32m    // Prepare response[m[m
[31m-     const restaurantObj = restaurant.toObject();[m[m
[31m-     const formattedResponse = {[m[m
[31m-       ...restaurantObj,[m[m
[31m-[36m@@ -190,15 +294,19 @@[m [mexport const updateMyRestaurant = async (req: Request, res: Response) => {[m[m
[31m- [m[m
[31m-     const finalResponse = JSON.parse(JSON.stringify(formattedResponse));[m[m
[31m-     res.status(200).json(finalResponse);[m[m
[31m-[31m-  } catch (error) {[m[m
[31m-[31m-    console.error("Error updating restaurant:", error);[m[m
[31m-[31m-    res.status(500).json({ message: "Error updating restaurant" });[m[m
[31m-[32m+[m[32m  } catch (error: unknown) {[m[m
[31m-[32m+[m[32m    if (error instanceof Error) {[m[m
[31m-[32m+[m[32m      console.error("Error updating restaurant:", error.message);[m[m
[31m-[32m+[m[32m      res.status(500).json({ message: "Error updating restaurant", error: error.message });[m[m
[31m-[32m+[m[32m    } else {[m[m
[31m-[32m+[m[32m      console.error("Unexpected error updating restaurant:", error);[m[m
[31m-[32m+[m[32m      res.status(500).json({ message: "Unexpected error updating restaurant" });[m[m
[31m-[32m+[m[32m    }[m[m
[31m-   }[m[m
[31m- };[m[m
[31m- [m[m
[31m-[32m+[m[32m// Additional Controller Functions (unchanged)[m[m
[31m- [m[m
[31m-[31m-[m[m
[31m-[31m-// The other controller functions remain unchanged, but we won't omit them here:[m[m
[31m- export const updateRestaurantStatus = async (req: Request, res: Response): Promise<void> => {[m[m
[31m-   try {[m[m
[31m-     const restaurantId = req.params.id;[m[m
[31m-[36m@@ -228,7 +336,7 @@[m [mexport const updateRestaurantStatus = async (req: Request, res: Response): Promi[m[m
[31m-   }[m[m
[31m- };[m[m
[31m- [m[m
[31m-[31m-const getMyRestaurantOrders = async (req: Request, res: Response) => {[m[m
[31m-[32m+[m[32mexport const getMyRestaurantOrders = async (req: Request, res: Response) => {[m[m
[31m-   try {[m[m
[31m-     const { status, date } = req.query;[m[m
[31m-     const restaurant = await Restaurant.findOne({ user: req.userId });[m[m
[31m-[36m@@ -324,10 +432,11 @@[m [mexport const updateRestaurantOrderStatus = async (req: Request, res: Response) =[m[m
[31m- };[m[m
[31m- [m[m
[31m- export default {[m[m
[31m-[31m-  updateRestaurantOrderStatus,[m[m
[31m-[31m-  getMyRestaurantOrders,[m[m
[31m-[32m+[m[32m  getAllRestaurants,[m[m
[31m-   getMyRestaurant,[m[m
[31m-   createMyRestaurant,[m[m
[31m-   updateMyRestaurant,[m[m
[31m-[31m-  uploadImage,[m[m
[31m-[32m+[m[32m  updateRestaurantStatus,[m[m
[31m-[32m+[m[32m  getMyRestaurantOrders,[m[m
[31m-[32m+[m[32m  updateRestaurantOrderStatus,[m[m
[31m- };[m[m
[31m-[1mdiff --git a/src/models/restaurant.ts b/src/models/restaurant.ts[m[m
[31m-[1mindex 43caaab9..80ddc51b 100644[m[m
[31m-[1m--- a/src/models/restaurant.ts[m[m
[31m-[1m+++ b/src/models/restaurant.ts[m[m
[31m-[36m@@ -1,6 +1,8 @@[m[m
[31m-[31m-import mongoose, { Schema, Document, Types } from "mongoose";[m[m
[31m-[32m+[m[32m// backend/src/models/restaurant.ts[m[m
[31m- [m[m
[31m-[32m+[m[32m// backend/src/models/restaurant.ts[m[m
[31m- [m[m
[31m-[32m+[m[32mimport mongoose, { Schema, Document, Types } from "mongoose";[m[m
[31m- [m[m
[31m- // Define the MenuItem schema and type[m[m
[31m- const menuItemSchema = new Schema({[m[m
[31m-[36m@@ -33,7 +35,7 @@[m [mconst branchInfoSchema = new Schema({[m[m
[31m-   latitude: { type: Number, required: true },[m[m
[31m-   longitude: { type: Number, required: true },[m[m
[31m-   deliveryPrice: { type: Number, default: 0 }, // in cents[m[m
[31m-[31m-  deliveryTime: { type: Number, default: 0 },  // in minutes or days, depending on business type[m[m
[31m-[32m+[m[32m  deliveryTime: { type: Number, default: 0 }, // in minutes or days, depending on business type[m[m
[31m- });[m[m
[31m- [m[m
[31m- export type BranchInfoType = {[m[m
[31m-[36m@@ -43,7 +45,7 @@[m [mexport type BranchInfoType = {[m[m
[31m-   latitude: number;[m[m
[31m-   longitude: number;[m[m
[31m-   deliveryPrice: number; // in cents[m[m
[31m-[31m-  deliveryTime: number;  // in minutes or days[m[m
[31m-[32m+[m[32m  deliveryTime: number; // in minutes or days[m[m
[31m- };[m[m
[31m- [m[m
[31m- // Define the Restaurant interface[m[m
[31m-[36m@@ -66,7 +68,7 @@[m [minterface IRestaurant extends Document {[m[m
[31m- }[m[m
[31m- [m[m
[31m- // Define the Restaurant schema[m[m
[31m-[31m-const RestaurantSchema = new Schema({[m[m
[31m-[32m+[m[32mconst RestaurantSchema: Schema = new Schema({[m[m
[31m-   restaurantName: { type: String, required: true },[m[m
[31m-   branchesInfo: [branchInfoSchema],[m[m
[31m-   country: { type: String, required: true },[m[m
[31m-[1mdiff --git a/src/routes/MyRestaurantRoute.ts b/src/routes/MyRestaurantRoute.ts[m[m
[31m-[1mindex 30779e9b..6fd83c7a 100644[m[m
[31m-[1m--- a/src/routes/MyRestaurantRoute.ts[m[m
[31m-[1m+++ b/src/routes/MyRestaurantRoute.ts[m[m
[31m-[36m@@ -1,11 +1,20 @@[m[m
[31m- //  C:\Users\gertf\Desktop\FoodApp\backend\src\routes\MyRestaurantRoute.ts[m[m
[31m- [m[m
[31m-[32m+[m[32m// backend/src/routes/MyRestaurantRoute.ts[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m// backend/src/routes/MyRestaurantRoute.ts[m[m
[31m-[32m+[m[m
[31m- import express from "express";[m[m
[31m- import multer from "multer";[m[m
[31m-[31m-import { getMyRestaurant, createMyRestaurant, updateMyRestaurant } from "../controllers/MyRestaurantController";[m[m
[31m-[32m+[m[32mimport {[m[m
[31m-[32m+[m[32m  getMyRestaurant,[m[m
[31m-[32m+[m[32m  createMyRestaurant,[m[m
[31m-[32m+[m[32m  updateMyRestaurant,[m[m
[31m-[32m+[m[32m  updateRestaurantOrderStatus,[m[m
[31m-[32m+[m[32m  getMyRestaurantOrders,[m[m
[31m-[32m+[m[32m} from "../controllers/MyRestaurantController";[m[m
[31m- import { jwtCheck, jwtParse } from "../middleware/auth";[m[m
[31m- import { validateMyRestaurantRequest } from "../middleware/validation";[m[m
[31m-[31m-import  MyRestaurantController from "../controllers/MyRestaurantController";[m[m
[31m- [m[m
[31m- const router = express.Router();[m[m
[31m- [m[m
[31m-[36m@@ -17,37 +26,20 @@[m [mconst upload = multer({[m[m
[31m-   },[m[m
[31m- });[m[m
[31m- [m[m
[31m-[31m-router.get([m[m
[31m-[31m-  "/order",[m[m
[31m-[31m-  jwtCheck,[m[m
[31m-[31m-  jwtParse,[m[m
[31m-[31m-  MyRestaurantController.getMyRestaurantOrders[m[m
[31m-[31m-);[m[m
[31m-[31m-[m[m
[31m-[31m-router.patch([m[m
[31m-[31m-  "/order/:orderId/status",[m[m
[31m-[31m-  jwtCheck,[m[m
[31m-[31m-  jwtParse,[m[m
[31m-[31m-  MyRestaurantController.updateRestaurantOrderStatus[m[m
[31m-[31m-);[m[m
[31m-[31m-[m[m
[31m-[31m-[m[m
[31m-[31m-[m[m
[31m-[32m+[m[32m// Define menuItemsFields with the correct field names using dot notation[m[m
[31m- const menuItemsFields = Array.from({ length: 40 }, (_, i) => ({[m[m
[31m-[31m-  name: `menuItems[${i}].menuItemImageFile`,[m[m
[31m-[32m+[m[32m  name: `menuItems[${i}].menuItemImageFile`, // Matches frontend with dot notation[m[m
[31m-   maxCount: 1,[m[m
[31m- }));[m[m
[31m- [m[m
[31m-[32m+[m[32m// Define the fields Multer should handle[m[m
[31m- const restaurantUpload = upload.fields([[m[m
[31m-[31m-  { name: "restaurantImageFile", maxCount: 1 },[m[m
[31m-[32m+[m[32m  { name: "restaurantImageFile", maxCount: 1 }, // Matches frontend[m[m
[31m-   ...menuItemsFields,[m[m
[31m- ]);[m[m
[31m- [m[m
[31m-[31m-// GET restaurant for logged-in user actually no validation needed but works with jwt & parse, [m[m
[31m-[31m-router.get("/",[m[m
[31m-[31m-   jwtCheck,[m[m
[31m-[31m-    jwtParse,[m[m
[31m-[31m-    getMyRestaurant);[m[m
[31m-[32m+[m[32m// GET restaurant for logged-in user[m[m
[31m-[32m+[m[32mrouter.get("/", jwtCheck, jwtParse, getMyRestaurant);[m[m
[31m- [m[m
[31m- // POST (create) a new restaurant[m[m
[31m- router.post([m[m
[31m-[36m@@ -69,5 +61,20 @@[m [mrouter.put([m[m
[31m-   updateMyRestaurant[m[m
[31m- );[m[m
[31m- [m[m
[31m-[31m-export default router;[m[m
[31m-[32m+[m[32m// PATCH (update order status)[m[m
[31m-[32m+[m[32mrouter.patch([m[m
[31m-[32m+[m[32m  "/order/:id/status",[m[m
[31m-[32m+[m[32m  jwtCheck,[m[m
[31m-[32m+[m[32m  jwtParse,[m[m
[31m-[32m+[m[32m  updateRestaurantOrderStatus[m[m
[31m-[32m+[m[32m);[m[m
[31m- [m[m
[31m-[32m+[m[32m// GET (fetch orders)[m[m
[31m-[32m+[m[32mrouter.get([m[m
[31m-[32m+[m[32m  "/order",[m[m
[31m-[32m+[m[32m  jwtCheck,[m[m
[31m-[32m+[m[32m  jwtParse,[m[m
[31m-[32m+[m[32m  getMyRestaurantOrders[m[m
[31m-[32m+[m[32m);[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32mexport default router;[m[m
[1mdiff --git a/package-lock.json b/package-lock.json[m
[1mindex 5ff2046a..86daaa85 100644[m
[1m--- a/package-lock.json[m
[1m+++ b/package-lock.json[m
[36m@@ -50,7 +50,7 @@[m
         "@types/js-cookie": "^3.0.6",[m
         "@types/jsonwebtoken": "^9.0.6",[m
         "@types/mongoose": "^5.11.97",[m
[31m-        "@types/node": "^20.16.1",[m
[32m+[m[32m        "@types/node": "^22.10.1",[m
         "babel-plugin-transform-remove-console": "^6.9.4",[m
         "eslint-config-prettier": "^9.1.0",[m
         "install": "^0.13.0",[m
[36m@@ -2594,12 +2594,12 @@[m
       }[m
     },[m
     "node_modules/@types/node": {[m
[31m-      "version": "20.17.9",[m
[31m-      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.17.9.tgz",[m
[31m-      "integrity": "sha512-0JOXkRyLanfGPE2QRCwgxhzlBAvaRdCNMcvbd7jFfpmD4eEXll7LRwy5ymJmyeZqk7Nh7eD2LeUyQ68BbndmXw==",[m
[32m+[m[32m      "version": "22.10.1",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.10.1.tgz",[m
[32m+[m[32m      "integrity": "sha512-qKgsUwfHZV2WCWLAnVP1JqnpE6Im6h3Y0+fYgMTasNQ7V++CBX5OT1as0g0f+OyubbFqhf6XVNIsmN4IIhEgGQ==",[m
       "license": "MIT",[m
       "dependencies": {[m
[31m-        "undici-types": "~6.19.2"[m
[32m+[m[32m        "undici-types": "~6.20.0"[m
       }[m
     },[m
     "node_modules/@types/prop-types": {[m
[36m@@ -10596,9 +10596,9 @@[m
       "license": "MIT"[m
     },[m
     "node_modules/undici-types": {[m
[31m-      "version": "6.19.8",[m
[31m-      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.19.8.tgz",[m
[31m-      "integrity": "sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw==",[m
[32m+[m[32m      "version": "6.20.0",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.20.0.tgz",[m
[32m+[m[32m      "integrity": "sha512-Ny6QZ2Nju20vw1SRHe3d9jVu6gJ+4e3+MMpqu7pqE5HT6WsTSlce++GQmK5UXS8mzV8DSYHrQH+Xrf2jVcuKNg==",[m
       "license": "MIT"[m
     },[m
     "node_modules/unicode-canonical-property-names-ecmascript": {[m
[1mdiff --git a/package.json b/package.json[m
[1mindex b35ff6fa..ce0e1e7a 100644[m
[1m--- a/package.json[m
[1m+++ b/package.json[m
[36m@@ -60,7 +60,7 @@[m
     "@types/js-cookie": "^3.0.6",[m
     "@types/jsonwebtoken": "^9.0.6",[m
     "@types/mongoose": "^5.11.97",[m
[31m-    "@types/node": "^20.16.1",[m
[32m+[m[32m    "@types/node": "^22.10.1",[m
     "babel-plugin-transform-remove-console": "^6.9.4",[m
     "eslint-config-prettier": "^9.1.0",[m
     "install": "^0.13.0",[m
[1mdiff --git a/src/controllers/MyRestaurantController.ts b/src/controllers/MyRestaurantController.ts[m
[1mindex cce03591..068ea19f 100644[m
[1m--- a/src/controllers/MyRestaurantController.ts[m
[1m+++ b/src/controllers/MyRestaurantController.ts[m
[36m@@ -1,19 +1,16 @@[m
[31m-// backend/src/controllers/MyRestaurantController.ts[m
[31m-[m
 import { Request, Response } from "express";[m
 import Restaurant from "../models/restaurant";[m
 import mongoose from "mongoose";[m
[31m-import User from "../models/user";[m
 import cloudinary from "cloudinary";[m
 import Order from "../models/order";[m
 [m
 // Function to upload an image to Cloudinary[m
[31m-const uploadImage = async (file: Express.Multer.File): Promise<string> => {[m
[32m+[m[32mexport const uploadImage = async (file: Express.Multer.File): Promise<string> => {[m
   try {[m
     const base64Image = Buffer.from(file.buffer).toString("base64");[m
     const dataURI = `data:${file.mimetype};base64,${base64Image}`;[m
     const uploadResponse = await cloudinary.v2.uploader.upload(dataURI, {[m
[31m-      secure: true,[m
[32m+[m[32m      secure: true, // Ensure HTTPS is used for the returned URL[m
     });[m
     return uploadResponse.secure_url;[m
   } catch (error: unknown) {[m
[36m@@ -26,33 +23,28 @@[m [mconst uploadImage = async (file: Express.Multer.File): Promise<string> => {[m
   }[m
 };[m
 [m
[32m+[m[32m// Fetch all restaurants[m
 export const getAllRestaurants = async (req: Request, res: Response): Promise<void> => {[m
   try {[m
     const restaurants = await Restaurant.find().exec();[m
     res.status(200).json(restaurants);[m
   } catch (error: unknown) {[m
[31m-    if (error instanceof Error) {[m
[31m-      console.error("Error fetching restaurants:", error.message);[m
[31m-      res.status(500).json({ message: "Error fetching restaurants", error: error.message });[m
[31m-    } else {[m
[31m-      console.error("Unexpected error fetching restaurants:", error);[m
[31m-      res.status(500).json({ message: "Unexpected error fetching restaurants" });[m
[31m-    }[m
[32m+[m[32m    console.error("Error fetching restaurants:", error);[m
[32m+[m[32m    res.status(500).json({ message: "Error fetching restaurants" });[m
   }[m
 };[m
 [m
[32m+[m[32m// Fetch a specific restaurant for the logged-in user[m
 export const getMyRestaurant = async (req: Request, res: Response) => {[m
   try {[m
     const userId = req.userId;[m
     if (!userId) {[m
[31m-      console.log("No userId provided");[m
       return res.status(400).json({ message: "User ID not provided" });[m
     }[m
 [m
     let restaurant = await Restaurant.findOne({ user: userId });[m
 [m
     if (!restaurant) {[m
[31m-      console.log("No restaurant found for user:", userId, "Creating a new one.");[m
       restaurant = new Restaurant({[m
         user: new mongoose.Types.ObjectId(userId),[m
         restaurantName: "New Restaurant",[m
[36m@@ -76,314 +68,153 @@[m [mexport const getMyRestaurant = async (req: Request, res: Response) => {[m
       await restaurant.save();[m
     }[m
 [m
[31m-    // Convert the entire restaurant document to a plain object once[m
[31m-    const restaurantObj = restaurant.toObject();[m
[31m-[m
     const formattedRestaurant = {[m
[31m-      ...restaurantObj,[m
[31m-      branchesInfo: restaurantObj.branchesInfo.map((branch: any) => ({[m
[32m+[m[32m      ...restaurant.toObject(),[m
[32m+[m[32m      branchesInfo: restaurant.branchesInfo.map((branch: any) => ({[m
         ...branch,[m
[31m-        deliveryPrice: branch.deliveryPrice != null ? branch.deliveryPrice / 100 : 0,[m
[31m-        deliveryTime: branch.deliveryTime != null ? branch.deliveryTime : 0,[m
[32m+[m[32m        deliveryPrice: branch.deliveryPrice / 100,[m
       })),[m
[31m-      menuItems: restaurantObj.menuItems.map((menuItem: any) => ({[m
[32m+[m[32m      menuItems: restaurant.menuItems.map((menuItem: any) => ({[m
         ...menuItem,[m
[31m-        name: menuItem.name || "Unnamed Item",[m
         price: menuItem.price / 100,[m
[31m-        imageUrl: menuItem.imageUrl || "/path/to/placeholder-image.jpg",[m
       })),[m
     };[m
 [m
[31m-    // Convert to pure JSON object[m
[31m-    const finalRestaurant = JSON.parse(JSON.stringify(formattedRestaurant));[m
[31m-[m
[31m-    res.json(finalRestaurant);[m
[32m+[m[32m    res.json(formattedRestaurant);[m
   } catch (error) {[m
     console.error("Error fetching restaurant:", error);[m
     res.status(500).json({ message: "Error fetching restaurant" });[m
   }[m
 };[m
 [m
[32m+[m[32m// Create a new restaurant[m
 export const createMyRestaurant = async (req: Request, res: Response): Promise<void> => {[m
   try {[m
[31m-    const existingRestaurant = await Restaurant.findOne({ user: req.userId }).exec();[m
[31m-    if (existingRestaurant) {[m
[31m-      res.status(409).json({ message: "User restaurant already exists" });[m
[31m-      return;[m
[31m-    }[m
[31m-[m
[31m-    const user = await User.findById(req.userId);[m
[31m-    if (!user) {[m
[31m-      res.status(404).json({ message: "User not found" });[m
[31m-      return;[m
[31m-    }[m
[31m-[m
[31m-    // Convert wholesale to boolean[m
[31m-    const wholesale = req.body.wholesale === "true";[m
[31m-[m
     const restaurant = new Restaurant({[m
[31m-      restaurantName: req.body.restaurantName,[m
[31m-      cellphone: req.body.cellphone,[m
[32m+[m[32m      ...req.body,[m
       branchesInfo: req.body.branchesInfo.map((branch: any) => ({[m
[31m-        cities: branch.cities,[m
[31m-        branchName: branch.branchName,[m
[31m-        latitude: branch.latitude,[m
[31m-        longitude: branch.longitude,[m
[31m-        deliveryPrice: Math.round(branch.deliveryPrice * 100), // Convert to cents[m
[31m-        deliveryTime: branch.deliveryTime,[m
[31m-      })),[m
[31m-      country: req.body.country,[m
[31m-      wholesale: wholesale, // Saved as boolean[m
[31m-      cuisines: req.body.cuisines,[m
[31m-      menuItems: req.body.menuItems.map((item: any) => ({[m
[31m-        name: item.name,[m
[31m-        price: Math.round(item.price * 100), // Convert to cents[m
[31m-        imageUrl: item.imageUrl || "",[m
[32m+[m[32m        ...branch,[m
[32m+[m[32m        deliveryPrice: Math.round(branch.deliveryPrice * 100),[m
       })),[m
       user: new mongoose.Types.ObjectId(req.userId),[m
[31m-      email: user.email || "",[m
       status: "submitted",[m
[31m-      lastUpdated: new Date(),[m
     });[m
 [m
     const files = req.files as { [fieldname: string]: Express.Multer.File[] } | undefined;[m
 [m
[31m-    // Handle restaurant image[m
[31m-    if (files?.restaurantImageFile && files.restaurantImageFile.length > 0) {[m
[31m-      const file = files.restaurantImageFile[0];[m
[31m-      const imageUrl = await uploadImage(file);[m
[31m-      restaurant.restaurantImageUrl = imageUrl;[m
[31m-    }[m
[31m-[m
[31m-    // Handle menu item images[m
[31m-    if (files) {[m
[31m-      for (let i = 0; i < req.body.menuItems.length; i++) {[m
[31m-        const field = `menuItems[${i}].menuItemImageFile`; // Use dot notation[m
[31m-        if (files[field] && files[field].length > 0) {[m
[31m-          const file = files[field][0];[m
[31m-          const imageUrl = await uploadImage(file);[m
[31m-          restaurant.menuItems[i].imageUrl = imageUrl;[m
[31m-        }[m
[31m-      }[m
[32m+[m[32m    // Upload restaurant image[m
[32m+[m[32m    if (files?.restaurantImageFile?.[0]) {[m
[32m+[m[32m      restaurant.restaurantImageUrl = await uploadImage(files.restaurantImageFile[0]);[m
     }[m
 [m
     await restaurant.save();[m
[31m-[m
[31m-    // Prepare response[m
[31m-    const restaurantObj = restaurant.toObject();[m
[31m-    const formattedResponse = {[m
[31m-      ...restaurantObj,[m
[31m-      branchesInfo: restaurantObj.branchesInfo.map((branch: any) => ({[m
[31m-        ...branch,[m
[31m-        deliveryPrice: branch.deliveryPrice / 100,[m
[31m-        deliveryTime: branch.deliveryTime,[m
[31m-      })),[m
[31m-      menuItems: restaurantObj.menuItems.map((menuItem: any) => ({[m
[31m-        ...menuItem,[m
[31m-        price: menuItem.price / 100,[m
[31m-      })),[m
[31m-    };[m
[31m-[m
[31m-    const finalResponse = JSON.parse(JSON.stringify(formattedResponse));[m
[31m-    res.status(201).json(finalResponse);[m
[31m-  } catch (error: unknown) {[m
[31m-    if (error instanceof Error) {[m
[31m-      console.error("Error creating restaurant:", error.message);[m
[31m-      res.status(500).json({ message: "Error creating restaurant", error: error.message });[m
[31m-    } else {[m
[31m-      console.error("Unexpected error creating restaurant:", error);[m
[31m-      res.status(500).json({ message: "Unexpected error creating restaurant" });[m
[31m-    }[m
[32m+[m[32m    res.status(201).json(restaurant);[m
[32m+[m[32m  } catch (error) {[m
[32m+[m[32m    console.error("Error creating restaurant:", error);[m
[32m+[m[32m    res.status(500).json({ message: "Error creating restaurant" });[m
   }[m
 };[m
 [m
[32m+[m[32m// Update restaurant details[m
 export const updateMyRestaurant = async (req: Request, res: Response) => {[m
   try {[m
     const restaurant = await Restaurant.findOne({ user: req.userId });[m
     if (!restaurant) {[m
[31m-      console.log("No restaurant found for user:", req.userId);[m
       return res.status(404).json({ message: "Restaurant not found" });[m
     }[m
 [m
[31m-    // Convert wholesale to boolean if provided[m
[31m-    if (req.body.wholesale !== undefined) {[m
[31m-      restaurant.wholesale = req.body.wholesale === "true";[m
[31m-    }[m
[31m-[m
[31m-    // Update basic fields[m
[31m-    restaurant.restaurantName = req.body.restaurantName || restaurant.restaurantName;[m
[31m-    restaurant.cellphone = req.body.cellphone || restaurant.cellphone;[m
[31m-    restaurant.country = req.body.country || restaurant.country;[m
[31m-    restaurant.cuisines = Array.isArray(req.body.cuisines) ? req.body.cuisines : restaurant.cuisines;[m
[31m-[m
[31m-    // Update branchesInfo[m
[31m-    if (Array.isArray(req.body.branchesInfo)) {[m
[31m-      restaurant.branchesInfo = req.body.branchesInfo.map((branch: any, index: number) => ({[m
[31m-        _id: branch._id || (restaurant.branchesInfo[index]?._id || new mongoose.Types.ObjectId()),[m
[31m-        cities: branch.cities || restaurant.branchesInfo[index]?.cities || "Default City",[m
[31m-        branchName:[m
[31m-          branch.branchName || restaurant.branchesInfo[index]?.branchName || `Branch ${index + 1}`,[m
[31m-        latitude:[m
[31m-          typeof branch.latitude === "number"[m
[31m-            ? branch.latitude[m
[31m-            : restaurant.branchesInfo[index]?.latitude || 0,[m
[31m-        longitude:[m
[31m-          typeof branch.longitude === "number"[m
[31m-            ? branch.longitude[m
[31m-            : restaurant.branchesInfo[index]?.longitude || 0,[m
[31m-        deliveryPrice:[m
[31m-          branch.deliveryPrice != null[m
[31m-            ? Math.round(branch.deliveryPrice * 100)[m
[31m-            : restaurant.branchesInfo[index]?.deliveryPrice || 0,[m
[31m-        deliveryTime:[m
[31m-          branch.deliveryTime != null ? branch.deliveryTime : restaurant.branchesInfo[index]?.deliveryTime || 0,[m
[31m-      }));[m
[31m-    }[m
[31m-[m
[31m-    // Update menuItems[m
[31m-    if (Array.isArray(req.body.menuItems)) {[m
[31m-      restaurant.menuItems = req.body.menuItems.map((menuItem: any, index: number) => ({[m
[31m-        _id: menuItem._id || (restaurant.menuItems[index]?._id || new mongoose.Types.ObjectId()),[m
[31m-        name: menuItem.name || restaurant.menuItems[index]?.name || "Unnamed Item",[m
[31m-        price:[m
[31m-          menuItem.price != null ? Math.round(menuItem.price * 100) : restaurant.menuItems[index]?.price || 0,[m
[31m-        imageUrl:[m
[31m-          menuItem.imageUrl ||[m
[31m-          restaurant.menuItems[index]?.imageUrl ||[m
[31m-          "/path/to/placeholder-image.jpg",[m
[31m-      }));[m
[31m-    }[m
[32m+[m[32m    Object.assign(restaurant, req.body);[m
 [m
     const files = req.files as { [fieldname: string]: Express.Multer.File[] } | undefined;[m
 [m
[31m-    // Handle restaurant image update[m
[31m-    if (files?.restaurantImageFile && files.restaurantImageFile.length > 0) {[m
[31m-      const file = files.restaurantImageFile[0];[m
[31m-      const imageUrl = await uploadImage(file);[m
[31m-      restaurant.restaurantImageUrl = imageUrl;[m
[31m-    }[m
[31m-[m
[31m-    // Handle menu item images update[m
[31m-    if (files) {[m
[31m-      for (let i = 0; i < req.body.menuItems.length; i++) {[m
[31m-        const field = `menuItems[${i}].menuItemImageFile`; // Use dot notation[m
[31m-        if (files[field] && files[field].length > 0) {[m
[31m-          const file = files[field][0];[m
[31m-          const imageUrl = await uploadImage(file);[m
[31m-          restaurant.menuItems[i].imageUrl = imageUrl;[m
[31m-        }[m
[31m-      }[m
[32m+[m[32m    // Update restaurant image[m
[32m+[m[32m    if (files?.restaurantImageFile?.[0]) {[m
[32m+[m[32m      restaurant.restaurantImageUrl = await uploadImage(files.restaurantImageFile[0]);[m
     }[m
 [m
     restaurant.lastUpdated = new Date();[m
     await restaurant.save();[m
 [m
[31m-    // Prepare response[m
[31m-    const restaurantObj = restaurant.toObject();[m
[31m-    const formattedResponse = {[m
[31m-      ...restaurantObj,[m
[31m-      branchesInfo: restaurantObj.branchesInfo.map((branch: any) => ({[m
[31m-        ...branch,[m
[31m-        deliveryPrice: branch.deliveryPrice / 100,[m
[31m-      })),[m
[31m-      menuItems: restaurantObj.menuItems.map((menuItem: any) => ({[m
[31m-        ...menuItem,[m
[31m-        price: menuItem.price / 100,[m
[31m-      })),[m
[31m-    };[m
[31m-[m
[31m-    const finalResponse = JSON.parse(JSON.stringify(formattedResponse));[m
[31m-    res.status(200).json(finalResponse);[m
[31m-  } catch (error: unknown) {[m
[31m-    if (error instanceof Error) {[m
[31m-      console.error("Error updating restaurant:", error.message);[m
[31m-      res.status(500).json({ message: "Error updating restaurant", error: error.message });[m
[31m-    } else {[m
[31m-      console.error("Unexpected error updating restaurant:", error);[m
[31m-      res.status(500).json({ message: "Unexpected error updating restaurant" });[m
[31m-    }[m
[32m+[m[32m    res.status(200).json(restaurant);[m
[32m+[m[32m  } catch (error) {[m
[32m+[m[32m    console.error("Error updating restaurant:", error);[m
[32m+[m[32m    res.status(500).json({ message: "Error updating restaurant" });[m
   }[m
 };[m
 [m
[31m-// Additional Controller Functions (unchanged)[m
[31m-[m
[32m+[m[32m// Update restaurant status[m
 export const updateRestaurantStatus = async (req: Request, res: Response): Promise<void> => {[m
   try {[m
     const restaurantId = req.params.id;[m
[31m-    const { status, contractType, contractId } = req.body;[m
[32m+[m[32m    const { status } = req.body;[m
 [m
     const restaurant = await Restaurant.findById(restaurantId).exec();[m
[32m+[m
     if (!restaurant) {[m
       res.status(404).json({ message: "Restaurant not found" });[m
       return;[m
     }[m
 [m
     restaurant.status = status;[m
[31m-    restaurant.contractType = contractType;[m
[31m-    restaurant.contractId = contractId;[m
     restaurant.lastUpdated = new Date();[m
 [m
     await restaurant.save();[m
     res.status(200).json(restaurant);[m
[31m-  } catch (error: unknown) {[m
[31m-    if (error instanceof Error) {[m
[31m-      console.error("Error updating restaurant status:", error.message);[m
[31m-      res.status(500).json({ message: "Error updating restaurant status", error: error.message });[m
[31m-    } else {[m
[31m-      console.error("Unexpected error updating restaurant status:", error);[m
[31m-      res.status(500).json({ message: "Unexpected error updating restaurant status" });[m
[31m-    }[m
[32m+[m[32m  } catch (error) {[m
[32m+[m[32m    console.error("Error updating restaurant status:", error);[m
[32m+[m[32m    res.status(500).json({ message: "Error updating restaurant status" });[m
   }[m
 };[m
 [m
[32m+[m
[32m+[m[32m// Fetch restaurant orders[m
 export const getMyRestaurantOrders = async (req: Request, res: Response) => {[m
   try {[m
[31m-    const { status, date } = req.query;[m
[32m+[m[32m    const { status } = req.query;[m
     const restaurant = await Restaurant.findOne({ user: req.userId });[m
[32m+[m
     if (!restaurant) {[m
       return res.status(404).json({ message: "Restaurant not found" });[m
     }[m
 [m
     const query: any = { restaurant: restaurant._id };[m
 [m
[31m-    // Filter by status if provided[m
     if (status) {[m
       query.status = status;[m
     }[m
 [m
[31m-    // Filter by date if provided (using `dateDelivered`)[m
[31m-    if (date) {[m
[31m-      const dateObj = new Date(date as string);[m
[31m-      const nextDay = new Date(dateObj);[m
[31m-      nextDay.setDate(dateObj.getDate() + 1);[m
[31m-[m
[31m-      query.dateDelivered = {[m
[31m-        $gte: dateObj,[m
[31m-        $lt: nextDay,[m
[31m-      };[m
[31m-    }[m
[31m-[m
     const orders = await Order.find(query).populate("restaurant").populate("user");[m
 [m
     res.json(orders);[m
   } catch (error) {[m
[31m-    console.error(error);[m
[31m-    res.status(500).json({ message: "Something went wrong" });[m
[32m+[m[32m    console.error("Error fetching orders:", error);[m
[32m+[m[32m    res.status(500).json({ message: "Error fetching orders" });[m
   }[m
 };[m
 [m
[32m+[m[32m// Update restaurant order status[m
 export const updateRestaurantOrderStatus = async (req: Request, res: Response) => {[m
[31m-  const { orderId } = req.params;[m
[31m-  const { status } = req.body;[m
[31m-[m
   try {[m
[32m+[m[32m    const { orderId } = req.params; // Assume orderId is passed as a string[m
[32m+[m[32m    const { status } = req.body;[m
[32m+[m
[32m+[m[32m    console.log(`Received request to update order ${orderId} status to ${status}`);[m
[32m+[m
[32m+[m[32m    // Validate and convert orderId to ObjectId[m
[32m+[m[32m    if (!mongoose.Types.ObjectId.isValid(orderId)) {[m
[32m+[m[32m      return res.status(400).json({ message: "Invalid order ID format" });[m
[32m+[m[32m    }[m
[32m+[m
     const order = await Order.findById(orderId).populate("restaurant").populate("user");[m
[32m+[m
     if (!order) {[m
[32m+[m[32m      console.error(`Order ${orderId} not found`);[m
       return res.status(404).json({ message: "Order not found" });[m
     }[m
 [m
     const restaurant = await Restaurant.findById(order.restaurant);[m
     if (!restaurant || restaurant.user.toString() !== req.userId) {[m
[32m+[m[32m      console.error(`Unauthorized to update order ${orderId}`);[m
       return res.status(403).json({ message: "Unauthorized to update this order" });[m
     }[m
 [m
[36m@@ -399,39 +230,43 @@[m [mexport const updateRestaurantOrderStatus = async (req: Request, res: Response) =[m
     };[m
 [m
     if (!validTransitions[order.status]?.includes(status)) {[m
[31m-      return res.status(400).json({ message: `Invalid transition from ${order.status} to ${status}` });[m
[32m+[m[32m      return res.status(400).json({[m
[32m+[m[32m        message: `Invalid transition from ${order.status} to ${status}`,[m
[32m+[m[32m      });[m
     }[m
 [m
[32m+[m[32m    // Update status and rejection/resolution messages[m
     if (status === "rejected") {[m
       order.rejectionMessage = {[m
[31m-        message: ["placed", "confirmed"].includes(order.status)[m
[31m-          ? "Out of stock, dragons flying to get ingredients."[m
[31m-          : "Refund pending.",[m
[32m+[m[32m        message: req.body.message || "Order rejected",[m
         timestamp: new Date(),[m
       };[m
[31m-    }[m
[31m-[m
[31m-    if (status === "resolved") {[m
[31m-      const isBeforePay = order.rejectionMessage?.message === "Out of stock, dragons flying to get ingredients.";[m
[32m+[m[32m    } else if (status === "resolved") {[m
       order.resolutionMessage = {[m
[31m-        message: isBeforePay[m
[31m-          ? "Order resolved before payment, no refund needed."[m
[31m-          : "Order resolved after payment, refund paid.",[m
[32m+[m[32m        message: req.body.message || "Order resolved",[m
         timestamp: new Date(),[m
       };[m
     }[m
[31m-[m
[32m+[m[32m    console.log(`Before saving, order status: ${order.status}`);[m
     order.status = status;[m
     await order.save();[m
[31m-[m
[32m+[m[32m    console.log(`After saving, order status: ${order.status}`);[m
[32m+[m[32m    console.log(`Order ${orderId} status updated to ${status}`);[m
     res.status(200).json(order);[m
   } catch (error) {[m
[31m-    console.error("Error updating restaurant order status:", error);[m
[31m-    res.status(500).json({ message: "Failed to update restaurant order status" });[m
[32m+[m[32m    console.error("Error updating order status:", error);[m
[32m+[m[32m    res.status(500).json({ message: "Error updating order status" });[m
   }[m
 };[m
 [m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m// Export all controllers[m
 export default {[m
[32m+[m[32m  uploadImage,[m
   getAllRestaurants,[m
   getMyRestaurant,[m
   createMyRestaurant,[m
[1mdiff --git a/src/controllers/MyUserController.ts b/src/controllers/MyUserController.ts[m
[1mindex 6159e14e..a4b44e2a 100644[m
[1m--- a/src/controllers/MyUserController.ts[m
[1m+++ b/src/controllers/MyUserController.ts[m
[36m@@ -63,7 +63,7 @@[m [mexport const updateMyUser = async (req: Request, res: Response) => {[m
     }[m
 [m
     const { name, address, city, country, cellphone } = req.body;[m
[31m-    const userLocation = req.session?.userLocation;[m
[32m+[m[32m    const userLocation = (req.session as any).userLocation;[m
 [m
     const updateData: any = {[m
       name,[m
[36m@@ -90,36 +90,6 @@[m [mexport const updateMyUser = async (req: Request, res: Response) => {[m
   }[m
 };[m
 [m
[31m-// export const promptForLocation = async (req: Request, res: Response) => {[m
[31m-//   try {[m
[31m-//     const { latitude, longitude } = req.body;[m
[31m-[m
[31m-//     if (typeof latitude !== "number" || typeof longitude !== "number") {[m
[31m-//       return res.status(400).json({ message: "Invalid location data provided." });[m
[31m-//     }[m
[31m-[m
[31m-//     const userId = req.userId;[m
[31m-[m
[31m-//     if (userId) {[m
[31m-//       const user = await User.findByIdAndUpdate([m
[31m-//         userId,[m
[31m-//         { userLocation: [latitude, longitude] },[m
[31m-//         { new: true }[m
[31m-//       );[m
[31m-//       return res.status(200).json({ message: "Location updated successfully.", user });[m
[31m-//     }[m
[31m-[m
[31m-//     if (!req.session) {[m
[31m-//       return res.status(500).json({ message: "Session is not initialized." });[m
[31m-//     }[m
[31m-[m
[31m-//     req.session.userLocation = [latitude, longitude];[m
[31m-//     res.status(200).json({ message: "Location stored temporarily.", location: req.session.userLocation });[m
[31m-//   } catch (error) {[m
[31m-//     console.error("Error updating location:", error);[m
[31m-//     res.status(500).json({ message: "Failed to handle location data" });[m
[31m-//   }[m
[31m-// };[m
 [m
 [m
 // Save or update location for a user[m
[36m@@ -165,3 +135,17 @@[m [mexport const saveUserLocation = async (req: Request, res: Response) => {[m
     return res.status(500).json({ message: "Failed to save location." });[m
   }[m
 };[m
[32m+[m
[32m+[m[32m// Step 7: Rollback ts-node and Related Dependencies (Optional)[m
[32m+[m[32m// If none of the above resolves the issue, rollback your ts-node version:[m
[32m+[m
[32m+[m[32m// Uninstall ts-node:[m
[32m+[m
[32m+[m[32m// bash[m
[32m+[m[32m// Copy code[m
[32m+[m[32m// npm uninstall ts-node[m
[32m+[m[32m// Install a specific working version:[m
[32m+[m
[32m+[m[32m// bash[m
[32m+[m[32m// Copy code[m
[32m+[m[32m// npm install ts-node@latest @types/node@latest --save-dev[m
[1mdiff --git a/src/controllers/OrderController.ts b/src/controllers/OrderController.ts[m
[1mindex 5732d519..691e1357 100644[m
[1m--- a/src/controllers/OrderController.ts[m
[1m+++ b/src/controllers/OrderController.ts[m
[36m@@ -17,12 +17,18 @@[m [mexport const updateUserOrderStatus = async (req: Request, res: Response) => {[m
   const { status } = req.body;[m
 [m
   try {[m
[32m+[m[32m    console.log(`Received request to update order ${orderId} status to ${status} by user ${req.userId}`);[m
[32m+[m
     const order = await Order.findById(orderId).populate("user").populate("restaurant");[m
     if (!order) {[m
[32m+[m[32m      console.error(`Order ${orderId} not found`);[m
       return res.status(404).json({ message: "Order not found" });[m
     }[m
 [m
[32m+[m[32m    console.log(`Fetched order: ${JSON.stringify(order, null, 2)}`);[m
[32m+[m
     if (order.user._id.toString() !== req.userId) {[m
[32m+[m[32m      console.warn(`Unauthorized access: User ${req.userId} is not authorized to update order ${orderId}`);[m
       return res.status(403).json({ message: "Unauthorized to update this order" });[m
     }[m
 [m
[36m@@ -43,7 +49,10 @@[m [mexport const updateUserOrderStatus = async (req: Request, res: Response) => {[m
     const orderStatus = order.status as keyof typeof validTransitions;[m
 [m
     if (!validTransitions[orderStatus]?.includes(status)) {[m
[31m-      return res.status(400).json({ message: `Invalid transition from ${order.status} to ${status}` });[m
[32m+[m[32m      console.error(`Invalid status transition from ${order.status} to ${status}`);[m
[32m+[m[32m      return res[m
[32m+[m[32m        .status(400)[m
[32m+[m[32m        .json({ message: `Invalid transition from ${order.status} to ${status}` });[m
     }[m
 [m
     if (status === "rejected") {[m
[36m@@ -51,13 +60,13 @@[m [mexport const updateUserOrderStatus = async (req: Request, res: Response) => {[m
         message: req.body.message || "Order rejected by user",[m
         timestamp: new Date(),[m
       };[m
[32m+[m[32m      console.log(`Added rejection message: ${JSON.stringify(order.rejectionMessage)}`);[m
     }[m
 [m
     order.status = status;[m
     console.log(`Updating order ${orderId} status from ${order.status} to ${status}`);[m
     await order.save();[m
[31m-    console.log(`Order status updated: ${order.status}`);[m
[31m-[m
[32m+[m[32m    console.log(`Order ${orderId} status updated successfully to ${status}`);[m
 [m
     res.status(200).json(order);[m
   } catch (error) {[m
[36m@@ -66,6 +75,7 @@[m [mexport const updateUserOrderStatus = async (req: Request, res: Response) => {[m
   }[m
 };[m
 [m
[32m+[m
 export const updateOrderStatusFromStripe = async (req: Request, res: Response) => {[m
   const { orderId } = req.params;[m
 [m
[1mdiff --git a/src/index.ts b/src/index.ts[m
[1mindex e2098489..ad00468c 100644[m
[1m--- a/src/index.ts[m
[1m+++ b/src/index.ts[m
[36m@@ -15,6 +15,7 @@[m [mimport orderUserRoute from "./routes/orderUserRoute";[m
 import OrderController from "./controllers/OrderController";[m
 import helmet from "helmet";[m
 [m
[32m+[m
 const app = express();[m
 [m
 // Add global error handlers[m
[36m@@ -67,6 +68,7 @@[m [mapp.use([m
   })[m
 );[m
 [m
[32m+[m
 // Define the webhook route before body parsers[m
 app.post([m
   "/api/order/checkout/webhook",[m
[1mdiff --git a/src/routes/MyRestaurantRoute.ts b/src/routes/MyRestaurantRoute.ts[m
[1mindex 6fd83c7a..8f921ab1 100644[m
[1m--- a/src/routes/MyRestaurantRoute.ts[m
[1m+++ b/src/routes/MyRestaurantRoute.ts[m
[36m@@ -1,8 +1,6 @@[m
 //  C:\Users\gertf\Desktop\FoodApp\backend\src\routes\MyRestaurantRoute.ts[m
 [m
[31m-// backend/src/routes/MyRestaurantRoute.ts[m
 [m
[31m-// backend/src/routes/MyRestaurantRoute.ts[m
 [m
 import express from "express";[m
 import multer from "multer";[m
[36m@@ -63,12 +61,13 @@[m [mrouter.put([m
 [m
 // PATCH (update order status)[m
 router.patch([m
[31m-  "/order/:id/status",[m
[32m+[m[32m  "/order/:orderId/status",[m
   jwtCheck,[m
   jwtParse,[m
   updateRestaurantOrderStatus[m
 );[m
 [m
[32m+[m
 // GET (fetch orders)[m
 router.get([m
   "/order",[m
[1mdiff --git a/src/types/express.d.ts b/src/types/express.d.ts[m
[1mdeleted file mode 100644[m
[1mindex 59f18f3c..00000000[m
[1m--- a/src/types/express.d.ts[m
[1m+++ /dev/null[m
[36m@@ -1,17 +0,0 @@[m
[31m-import "express-session";[m
[31m-[m
[31m-declare module "express-session" {[m
[31m-  interface SessionData {[m
[31m-    userLocation?: { latitude: number; longitude: number };[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-declare global {[m
[31m-  namespace Express {[m
[31m-    interface Request {[m
[31m-      userId?: string; // MongoDB _id of the user[m
[31m-      userEmail?: string; // User's email[m
[31m-      auth0Id?: string; // Auth0 ID[m
[31m-    }[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/src/utils/commitdiff.ts b/src/utils/commitdiff.ts[m
[1mindex 744f62d8..440efa9a 100644[m
[1m--- a/src/utils/commitdiff.ts[m
[1m+++ b/src/utils/commitdiff.ts[m
[36m@@ -1,2 +1,3 @@[m
 // git diff 82ce93e0 dcf3c5bd --color=always > backend_diff.txt[m
[31m-// git diff 31c7666 e34eb6e --color=always > frontend_diff.txt[m
\ No newline at end of file[m
[32m+[m[32m// git diff 31c7666 e34eb6e --color=always > frontend_diff.txt[m
[32m+[m[32m// git diff --color=always > backend_diff.txt[m
[1mdiff --git a/tsconfig.json b/tsconfig.json[m
[1mindex a90e532a..c85a0462 100644[m
[1m--- a/tsconfig.json[m
[1m+++ b/tsconfig.json[m
[36m@@ -4,7 +4,7 @@[m
   "compilerOptions": {[m
     "outDir": "./dist",[m
     "typeRoots": ["./node_modules/@types", "./src/types"],[m
[31m-    "types": ["node"],[m
[32m+[m[32m    "types": ["node", "express", "express-session"],[m
    [m
 [m
     /* Language and Environment */[m
